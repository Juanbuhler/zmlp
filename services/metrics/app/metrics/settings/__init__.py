"""
Django settings for metrics project.

Generated by 'django-admin startproject' using Django 3.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""
import os

import sentry_sdk
from django.core.management.utils import get_random_secret_key
from pathlib import Path

from sentry_sdk.integrations.celery import CeleryIntegration
from sentry_sdk.integrations.django import DjangoIntegration

VERSION = '0.1.0'
ENVIRONMENT = os.environ.get('ENVIRONMENT', 'localdev')
TESTING = False

sentry_sdk.init(
    dsn="https://8cfff0e24f534ce2b470301f7029ee6d@o280392.ingest.sentry.io/5721699",
    integrations=[DjangoIntegration(), CeleryIntegration()],
    environment=ENVIRONMENT
)


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# For a stable deployment, you MUST set the Secret Key env variable,
# otherwise every new process will create a new secret key and cause
# unpredictable behavior.
SECRET_KEY = os.environ.get('SECRET_KEY', get_random_secret_key())

# SECURITY WARNING: don't run with debug turned on in production!
if os.environ.get('DEBUG') == 'true':
    DEBUG = True
else:
    DEBUG = False

ALLOWED_HOSTS = ['*']
APPEND_SLASH = False


# Application definition

INSTALLED_APPS = [
    'metrics',
    'metrics.records',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.postgres',
    'django.contrib.staticfiles',
    'psqlextra',
    'rest_framework',
    'health_check',
    'health_check.db'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

]

if os.environ.get('LOG_REQUESTS') == 'true':
    MIDDLEWARE.append('requestlogs.middleware.RequestLogsMiddleware')

ROOT_URLCONF = 'metrics.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'metrics.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases
# Postgres is required for the type of aggregations that we run
DATABASES = {
    'default': {
        'ENGINE': 'psqlextra.backend',
        'NAME': 'metrics',
        'USER': os.environ.get('PG_DB_USER', 'metrics'),
        'PASSWORD': os.environ.get('PG_DB_PASSWORD', 'admin'),
        'HOST': os.environ.get('PG_DB_HOST', '127.0.0.1'),
        'PORT': os.environ.get('PG_DB_PORT', '5432'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

# Rest Framework
REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 50,
    'EXCEPTION_HANDLER': 'requestlogs.views.exception_handler',
    'TEST_REQUEST_DEFAULT_FORMAT': 'json',
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser'
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ]
}

if os.environ.get('BROWSABLE') == 'true':
    REST_FRAMEWORK['DEFAULT_RENDERER_CLASSES'].append(
        'rest_framework.renderers.BrowsableAPIRenderer'
    )

# General Application Settings
SUPERUSER_EMAIL = os.environ.get('SUPERUSER_EMAIL', 'admin@example.com')
SUPERUSER_PASSWORD = os.environ.get('SUPERUSER_PASSWORD', 'admin')
SUPERUSER_FIRST_NAME = os.environ.get('SUPERUSER_FIRST_NAME', 'Admin')
SUPERUSER_LAST_NAME = os.environ.get('SUPERUSER_LAST_NAME', 'Adminson')

# Logging Settings
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': os.environ.get('DJANGO_LOG_LEVEL', 'INFO'),
        },
        'requestlogs': {
            'handlers': ['console'],
            'level': os.environ.get('DJANGO_LOG_LEVEL', 'INFO'),
            'propagate': False,
        },
    },
}

# Celery Settings
REDIS_HOST = os.environ.get('REDIS_HOST', 'redis')
