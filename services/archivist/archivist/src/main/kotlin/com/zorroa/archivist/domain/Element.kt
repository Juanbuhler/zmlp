package com.zorroa.archivist.domain

import io.swagger.annotations.ApiModel
import io.swagger.annotations.ApiModelProperty

@ApiModel(
    "Element", description = "Defines a unique entity with an asset's visual representation, " +
        "for example an object or a face. Elements are unique by a specific type, rect, files and" +
        "labels. "
)
class Element(

    @ApiModelProperty("The type of element, allowed to be arbitrary but 'object' and 'face' are most common.")
    val type: String,
    @ApiModelProperty("Labels generated by the element analysis. All elements should have at least 1 label.")
    val labels: List<String>,
    @ApiModelProperty("The rectangle of the element")
    val rect: List<Int>?=null,
    @ApiModelProperty("The region of the image the element is in, NW, SW, SE, SW, and CENTER")
    val regions: List<String>?=null,
    @ApiModelProperty("An optional prediction score if a prediction was made.")
    val score: Double?=null,
    @ApiModelProperty("An optional file name assocated with the element, which will be in the 'files' namespace")
    val file: String?=null
)
{
    /**
     * Elements with the same type, labels, rect and file are considered unique.
     */
    override fun equals(other: Any?): Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as Element

        if (type != other.type) return false
        if (labels != other.labels) return false
        if (rect != other.rect) return false
        if (file != other.file) return false

        return true
    }

    override fun hashCode(): Int {
        var result = type.hashCode()
        result = 31 * result + labels.hashCode()
        result = 31 * result + (rect?.hashCode() ?: 0)
        result = 31 * result + (file?.hashCode() ?: 0)
        return result
    }
}