#!/usr/bin/env python
import argparse
import os
import textwrap
import subprocess

import xml.etree.ElementTree as et

"""
Extracts the embedded X509 certs from a SAML metdata file and creates a java keystore.
This keystore is used to validate signed SAML requests.
"""

def main():
    parser = argparse.ArgumentParser(prog="saml2keystore")
    parser.add_argument("-m", "--metadata", help="The SAML metadata file. Optional")
    parser.add_argument("-o", "--output", help="The output dir")

    args = parser.parse_args()
    parse(args.metadata, args.output)

def parse(metadata, output_dir):
    if not output_dir:
        output_dir = os.path.realpath(os.getcwd())
    print "Output dir: %s" % output_dir

    if (metadata):
        print "Parsing metdata file"
        cert_file = output_dir + "/saml.cert"
        with open(cert_file, "w") as fpw:
            with open(metadata) as fp:
                for line in fp.xreadlines():
                    line = line.strip()
                    if "X509Certificate" in line:
                        cert = line.split(">")[1].split("<")[0]
                        fpw.write("-----BEGIN CERTIFICATE-----\n")
                        fpw.write(textwrap.fill(cert, 64))
                        fpw.write("\n-----END CERTIFICATE-----\n")


    keystore_file = output_dir + "/keystore.jks"
    try:
        os.remove(keystore_file)
    except OSError:
        pass

    print "Create a private key for signing our requests."
    print "Make the key and store password: zorroa"
    cmd = [
        "keytool",
        "-genkey",
        "-v",
        "-keystore",
        keystore_file,
        "-alias",
        "zorroa",
        "-keyalg",
        "RSA",
        "-keysize",
        "2048",
        "-validity",
        "36500"]
    subprocess.call(cmd)

    if metadata:
        print "Adding the IDP public keys"
        cmd = [
            "keytool",
            "-import",
            "-alias",
            "idp",
            "-file",
            cert_file,
            "-keystore",
            keystore_file,
            "-storepass",
            "zorroa",
            "-noprompt"]
        subprocess.call(cmd)

if __name__ == '__main__':
    main()
