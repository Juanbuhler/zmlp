#!/usr/bin/env python
import argparse
import subprocess
import yaml
import json
import shutil
import os

def main():
    parser = argparse.ArgumentParser(prog="zbuild")
    parser.add_argument("project", help="The project to build")
    parser.add_argument("-p", "--push", action="store_true", help="push to GCP container registry")
    parser.add_argument("-d", "--deploy", action="store_true", help="Deploy latest version")
    parser.add_argument("-b", "--build", action="store_true", help="Recompile jar file")

    args = parser.parse_args()
    app = yaml.load(open("app.yaml"))

    if args.build:
        rebuild_jar_file()

    build_docker_image(args.project, app)

    if args.push:
        push_to_gcp(args.project, app)

    if args.deploy:
        deploy_to_app_engine(args.project, app)


def build_docker_image(project, app):
    ext_file = "deploy/%s/config/ext.json" % project
    if os.path.exists(ext_file):
        exts = json.load(open(ext_file))
        for ext in exts:
            src_file = "../%s/target/%s.jar" % (ext, ext)
            dst_file = "deploy/%s/ext" % project
            print "Copying %s extension plugin %s->%s" % (ext, src_file, dst_file)
            shutil.copy(src_file, dst_file)

    print "Building docker image: %s:%s" % (project, app["service"])
    cmd = ["docker", "build", "-t", get_image_name(project, app), "--build-arg", "project=%s" %project, "."]
    print cmd
    subprocess.call(cmd, shell=False)

def get_image_name(project, app):
    return "gcr.io/%s/%s:latest" % (project, app["service"])

def push_to_gcp(project, app):
    image = get_image_name(project, app)
    cmd = ["docker", "push", image]
    print cmd
    subprocess.call(cmd, shell=False)

def deploy_to_app_engine(project, app):
    image = get_image_name(project, app)
    cmd = ["gcloud", "app", "deploy", "app.yaml", "--project", project, "--image-url", image, "--quiet"]
    print cmd
    subprocess.call(cmd, shell=False)

def rebuild_jar_file():
    cmd =["mvn", "package", "-Dmaven.test.skip=true"]
    print cmd
    ret = subprocess.call(cmd, shell=False)
    if ret != 0:
        raise RuntimeError("Failed to compile java library!!");

if __name__ == '__main__':
    main()

