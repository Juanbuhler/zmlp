#!/usr/bin/env python3
import argparse
import os
import subprocess

import yaml


def main():
    parser = argparse.ArgumentParser(description='Build docker containers with buildx')
    parser.add_argument('containers', metavar='C', type=str, nargs='*',
                        help='Container names to build')
    parser.add_argument('--core', '-c', action='store_true',
                        help='Build boonai-plugins-core and SDK requirements')
    parser.add_argument('--jvm', '-j', action='store_true',
                        help='Build Python services')
    parser.add_argument('--plugins', '-p', action='store_true',
                        help='Build full plugins stack')
    parser.add_argument('--analysis', '-a', action='store_true',
                        help='Build boonai-plugins-analysis and SDK requirements')
    parser.add_argument('--list', '-l', action='store_true',
                        help='Output list of containers')
    parser.add_argument('--threads', '-t', type=int, default=8,
                        help='Maximum number of parallel builds')
    parser.add_argument('--system-prune', '-s', action='store_true',
                        help='Do a system prune')
    parser.add_argument('--full-system-prune', '-f', action='store_true',
                        help='Do a full system prune, including non-dangling images')

    args = parser.parse_args()
    if args.containers:
        containers = set(args.containers)
    else:
        containers = set()

    if args.plugins:
        containers.update(['py3-base',
                           'boonsdk',
                           'boonlab',
                           'boonflow',
                           'boondocks',
                           'plugins-core',
                           'plugins-models',
                           'plugins-analysis',
                           'plugins-train'])

    if args.core:
        containers.update(['boonsdk',
                           'boonlab',
                           'boonflow',
                           'boondocks',
                           'plugins-core'])
    if args.jvm:
        containers.update(['elasticsearch',
                           'jvm-common',
                           'archivist',
                           'auth-server'])
    if args.analysis:
        containers.update(['boonsdk',
                           'boonlab',
                           'boonflow',
                           'boondocks',
                           'plugins-analysis'])

    if args.system_prune or args.full_system_prune:
        system_prune(args.full_system_prune)

    build_dependency_tree(containers, args.list, args.threads)


def pull_base_images():
    """
    Re-pull the commonly used based images.  We have to do this
    because using --no-cache also disabled the buildx cache.
    """
    images = [
        'ubuntu:focal',
        'maven:3.6-jdk-11-slim',
        'openjdk:11-jdk-slim',
        'nginx:mainline'
    ]
    for image in images:
        subprocess.call(['docker', 'pull', image], shell=False)


def system_prune(full):
    """
    Do a system prune.

    Args:
        full (true): Prune everything, even non-dangling images.
    """
    cmd = ['docker', 'system', 'prune', '-f']
    if full:
        cmd.append('-a')
    subprocess.call(cmd, shell=False)


def build_dependency_tree(to_build, list_only, threads=8):
    env = os.environ
    env['DOCKER_CLI_EXPERIMENTAL'] = 'enabled'
    with open('docker-compose.yml') as fp:
        compose = yaml.load(fp, yaml.Loader)

    built = set()
    need_to_build = set()

    # Pass #1
    for svc_name, svc in compose['services'].items():
        if not svc.get("build"):
            built.add(svc_name)
        else:
            need_to_build.add(svc_name)

    # Pass #2
    phases = []
    while len(need_to_build) > 0:
        phase_built = set()
        for svc_name, svc in compose['services'].items():
            if svc_name in built:
                continue
            depends = svc.get('depends_on')
            if not depends or frozenset(depends).issubset(built):
                need_to_build.remove(svc_name)
                phase_built.add(svc_name)
        built.update(phase_built)
        phases.append(phase_built)

    if list_only:
        for idx, phase in enumerate(phases):
            print("Phase {}".format(idx))
            print("-------")
            for item in phase:
                print(" - {}".format(item))
        return

    pull_base_images()

    def chunks(lst, n):
        for i in range(0, len(lst), n):
            yield lst[i:i + n]

    # Pass #3
    for phase in phases:
        if to_build:
            phase = to_build.intersection(phase)
        if not phase:
            continue

        for chunk in chunks(list(phase), threads):
            # Adding --no-cache won't use the stupid maven cache.
            cmd = ['docker', 'buildx', 'bake', '-f', 'docker-compose.yml']
            cmd.extend(chunk)
            print('Building {}'.format(chunk))
            subprocess.check_call(cmd, shell=False, env=env)


if __name__ == '__main__':
    main()

