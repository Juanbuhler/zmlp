image: docker:18.09.8-dind # A Docker 19 based image does not work on Gitlab shared runners (November 2019)
services:
  - docker:18.09.8-dind
variables:
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: tcp://localhost:2375
  LOCAL_ES_NAME: $CI_REGISTRY_IMAGE/elasticsearch:$CI_COMMIT_SHORT_SHA

stages:
  - build
  - pretest
  - test
  - push

# Wallet Jobs
.wallet-base:
  only:
    - merge_requests
    - development
    - qa
    - master

.wallet-frontend-base:
  extends: .wallet-base
  image: node:12
  before_script:
    - cd applications/wallet/app/frontend
    - npm ci

wallet-frontend-test-suite:
  extends: .wallet-frontend-base
  stage: test
  script:
    - npm run lint
    - npm run test:cover
    - npm run size

wallet-backend-test-suite:
  extends: .wallet-base
  image: mc706/pipenv-3.6
  stage: test
  services:
    - name: postgres:9.6.9
      alias: postgres
  variables:
    POSTGRES_PASSWORD: a8fnnbe934j
    POSTGRES_USER: wallet
    POSTGRES_DB: wallet
    PG_HOST: postgres
  script:
    - cd applications/wallet
    - pipenv sync
    - cd app
    - pipenv run flake8
    - pipenv run pytest --cov=.

wallet-container-build-validation:
  only:
    - development
  stage: test
  image: docker:18.09.8-dind
  services:
    - docker:18.09.8-dind
  script:
    - docker build --pull --no-cache -f applications/wallet/Dockerfile .

backend-py-lint:
  image: python:3.7
  stage: pretest
  allow_failure: false
  only:
    - merge_requests
    - development
    - qa
    - master
  script:
    - python -m pip install flake8
    - flake8 --config .flake8.cfg sdk/python containers/zmlp-py3-base services/analyst
    - flake8 --config .flake8.cfg containers/zmlp-plugins-base containers/zmlp-plugins-core containers/zmlp-plugins-analysis

backend-kotlin-lint:
  image: kkopper/ktlint
  stage: pretest
  only:
    - merge_requests
    - development
    - qa
    - master
  script:
    - ktlint services/archivist/src/**/*.kt
    - ktlint services/auth-server/src/**/*.kt
    - ktlint services/elasticsearch/es-kwconf/src/main/kotlin/**/*.kt
    - ktlint services/officer/src/**/*.kt

# SDK Test
sdk-unit-tests:
  image: python:3.7
  stage: test
  allow_failure: true
  only:
    - merge_requests
    - development
    - qa
    - master
  script:
    - python -m pip install pipenv pytest
    - cd sdk/python
    - pipenv install -r requirements.txt
    - pipenv run pytest
    - cd ../../containers/zmlp-plugins-base
    - pipenv install -r requirements.txt
    - cd ../../sdk/python
    - pipenv run python setup.py install
    - cd ../../containers/zmlp-plugins-base
    - pipenv run pytest
    - cd ../../services/analyst
    - pipenv install -r requirements.txt
    - pipenv run pytest

docker_hub_push:
  image: docker:18.09.8-dind
  stage: push
  services:
    - docker:18.09.8-dind
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_HOST: tcp://localhost:2375
    DOCKER_HUB_IMAGE: zorroaevi/analyst:$CI_COMMIT_REF_SLUG
  retry: 2
  only:
    - development
  script:
    - apk add docker-compose
    - docker login -u "$DOCKERHUB_USER" -p "$DOCKERHUB_PASS"
    - docker-compose build
    - docker tag zmlp/zmlp-py3-base:latest zmlp/zmlp-py3-base:development; docker push zmlp/zmlp-py3-base:development
    - docker tag zmlp/zmlp-py3-sdk:latest zmlp/zmlp-py3-sdk:development; docker push zmlp/zmlp-py3-sdk:development
    - docker tag zmlp/authserver:latest zmlp/authserver:development; docker push zmlp/authserver:development
    - docker tag zmlp/apigateway:latest zmlp/apigateway:development; docker push zmlp/apigateway:development
    - docker tag zmlp/analyst:latest zmlp/analyst:development; docker push zmlp/analyst:development
    - docker tag zmlp/archivist:latest zmlp/archivist:development; docker push zmlp/archivist:development
    - docker tag zmlp/wallet:latest zmlp/wallet:development; docker push zmlp/wallet:development
    - docker tag zmlp/elasticsearch:latest zmlp/elasticsearch:development; docker push zmlp/elasticsearch:development

# Kotlin services - Unit tests - Step 1
services_build_artifacts:
  image: maven:3.6.2-jdk-11-slim
  stage: build
  only:
    - merge_requests
    - development
  script:
    - cd services/elasticsearch
    - mvn clean install -Dmaven.test.skip=true
  artifacts:
    paths:
      - services/elasticsearch/es-similarity/target/releases/es-similarity.zip

# Kotlin services - Unit tests - Step 2
services_push_to_local_registry:
  image: docker:18.09.8-dind
  stage: pretest
  only:
    - merge_requests
    - development
  retry: 2
  services:
    - docker:18.09.8-dind
  script:
    - cd services/elasticsearch
    - docker login $CI_REGISTRY -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD
    - docker build -t $LOCAL_ES_NAME .
    - docker push $LOCAL_ES_NAME

services_unit_tests:
  stage: test
  image: maven:3.6.3-jdk-11-slim
  only:
    - merge_requests
    - development
  services:
    - name: redis:alpine
      alias: redis
    - name: minio/minio
      alias: minio
    - name: postgres:9.6.9
      alias: postgres
    - name: $LOCAL_ES_NAME
      alias: elasticsearch
      command: [ "bin/elasticsearch", "-Ediscovery.type=single-node"]
  variables:
    POSTGRES_PASSWORD: "zorroa"
    POSTGRES_USER: "zorroa"
    POSTGRES_DB: "zorroa"
    PGDATA: "/var/lib/postgresql/data/pgdata"
    ARCHIVIST_ES_URL: "http://localhost:9200"
    SPRING_FLYWAY_SCHEMAS: "archivist_test"
    SPRING_DATASOURCE_URL: "jdbc:postgresql://localhost:5432/zorroa?currentSchema=archivist_test"
    LOGGING_LEVEL_COM_ZORROA: "WARN"
    USER: "gitlab"
    ARCHIVIST_STORAGE_ACCESSKEY: "qwerty123"
    ARCHIVIST_STORAGE_SECRETKEY: "123qwerty"
    ARCHIVIST_STORAGE_URL: "http://localhost:9000"
    MLSTORAGE_ACCESSKEY: "qwerty123"
    MLSTORAGE_SECRETKEY: "123qwerty"
    MLSTORAGE_URL: "http://localhost:9000"
    MINIO_ACCESS_KEY: "qwerty123"
    MINIO_SECRET_KEY: "123qwerty"
  script:
    - export
    - mvn test verify -f services/archivist -q
    - mvn test verify -f services/auth-server -q
    - mvn test verify -f services/officer -q

# Kotlin Services Jobs


#
#sdk-containers-tests:
#  stage: test
#  before_script:
#    - apk add --no-cache python3 # for build-images.py
#    - pip3 install wheel
#    - ./build-images.py
#  script:
#    - docker run -v $PWD/test-data:/test-data --entrypoint pytest zmlp-plugins-analysis /zps/pylib/zplugins
#    - docker run -v $PWD/test-data:/test-data --entrypoint pytest zmlp-plugins-core /zps/pylib/zplugins

