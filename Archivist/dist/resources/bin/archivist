#!/bin/sh
#
# Shamelessly copied from:
# https://github.com/elastic/elasticsearch/tree/master/distribution/src/main/resources/bin
#

# OPTIONS:
#    -d            daemonize (run in background)
#    -p pidfile    write PID to <pidfile>
#    -h
#    --help        print command line options
#    -v            print  version, then exit
#    -D prop       set JAVA system property
#    -X prop       set non-standard JAVA system property
#   --prop=val
#   --prop val     set archivist property (i.e.  -Darchivist.<prop>=<val>)

# CONTROLLING STARTUP:
#
# This script relies on few environment variables to determine startup
# behavior, those variables are:
#
#   JAVA_OPTS    -- Additional arguments to the JVM for heap size, etc
#   ARCHIVIST_JAVA_OPTS -- External Java Opts on top of the defaults set
#
#
# Optionally, exact memory values can be set using the following values, note,
# they can still be set using the `ARCHIVIST_JAVA_OPTS`. Sample format include "512m", and "10g".
#
#   ARCHIVIST_HEAP_SIZE -- Sets both the minimum and maximum memory to allocate (recommended)
#
# As a convenience, a fragment of shell is sourced in order to set one or
# more of these variables. This so-called `include' can be placed in a
# number of locations and will be searched for in order. The lowest
# priority search path is the same directory as the startup script, and
# since this is the location of the sample in the project tree, it should
# almost work Out Of The Box.
#
# Any serious use-case though will likely require customization of the
# include. For production installations, it is recommended that you copy
# the sample to one of /usr/share/archivist/archivist.in.sh,
# /usr/local/share/archivist/archivist.in.sh, or
# /opt/archivist/archivist.in.sh and make your modifications there.
#
# Another option is to specify the full path to the include file in the
# environment. For example:
#
#   $ ARCHIVIST_INCLUDE=/path/to/in.sh archivist -p /var/run/es.pid
#
# Note: This is particularly handy for running multiple instances on a
# single installation, or for quick tests.
#
# If you would rather configure startup entirely from the environment, you
# can disable the include by exporting an empty ARCHIVIST_INCLUDE, or by
# ensuring that no include files exist in the aforementioned search list.
# Be aware that you will be entirely responsible for populating the needed
# environment variables.

CDPATH=""
SCRIPT="$0"

# SCRIPT may be an arbitrarily deep series of symlinks. Loop until we have the concrete path.
while [ -h "$SCRIPT" ] ; do
  ls=`ls -ld "$SCRIPT"`
  # Drop everything prior to ->
  link=`expr "$ls" : '.*-> \(.*\)$'`
  if expr "$link" : '/.*' > /dev/null; then
    SCRIPT="$link"
  else
    SCRIPT=`dirname "$SCRIPT"`/"$link"
  fi
done

# determine archivist home
ARCHIVIST_HOME=`dirname "$SCRIPT"`/..

# make archivist_HOME absolute
ARCHIVIST_HOME=`cd "$ARCHIVIST_HOME"; pwd`


# If an include wasn't specified in the environment, then search for one...
if [ "x$ARCHIVIST_INCLUDE" = "x" ]; then
    # Locations (in order) to use when searching for an include file.
    for include in /usr/share/archivist/archivist.in.sh \
                   /usr/local/share/archivist/archivist.in.sh \
                   /opt/archivist/archivist.in.sh \
                   ~/.archivist.in.sh \
                   $ARCHIVIST_HOME/bin/archivist.in.sh \
                   "`dirname "$0"`"/archivist.in.sh; do
        if [ -r "$include" ]; then
            . "$include"
            break
        fi
    done
# ...otherwise, source the specified include.
elif [ -r "$ARCHIVIST_INCLUDE" ]; then
    . "$ARCHIVIST_INCLUDE"
fi

if [ -x "$JAVA_HOME/bin/java" ]; then
    JAVA="$JAVA_HOME/bin/java"
else
    JAVA=`which java`
fi

if [ ! -x "$JAVA" ]; then
    echo "Could not find any executable java binary. Please install java in your PATH or set JAVA_HOME"
    exit 1
fi

# Special-case path variables.
case `uname` in
    CYGWIN*)
        ARCHIVIST_HOME=`cygpath -p -w "$ARCHIVIST_HOME"`
    ;;
esac

launch_service()
{
    pidpath=$1
    daemonized=$2
    props=$3
    ARCHIVIST_parms="-Darchivist"

    if [ "x$pidpath" != "x" ]; then
        export PIDFILE=$pidpath
    fi

    # Make sure we dont use any predefined locale, as we check some exception message strings and rely on english language
    # As those strings are created by the OS, they are dependant on the configured locale
    LANG=en_US.UTF-8
    LC_ALL=en_US.UTF-8

    export HOSTNAME=`hostname -s`

    # The es-foreground option will tell analyst not to close stdout/stderr, but it's up to us not to daemonize.
    if [ "x$daemonized" = "x" ]; then
        ARCHIVIST_parms="$ARCHIVIST_parms -Darchivist.foreground=yes"
        exec "$JAVA" -jar $JAVA_OPTS $ARCHIVIST_JAVA_OPTS $ARCHIVIST_parms $props -Darchivist.path.home="$ARCHIVIST_HOME" \
                -Des.config="$ARCHIVIST_HOME"/config/elasticsearch.yml \
                -Dspring.config.location="$ARCHIVIST_HOME"/config/ \
                "$ARCHIVIST_HOME"/lib/archivist.jar
        # exec without running it in the background, makes it replace this shell, we'll never get here...
        # no need to return something
    else
        exec "$JAVA" -jar $JAVA_OPTS $ARCHIVIST_JAVA_OPTS $ARCHIVIST_parms $props -Darchivist.path.home="$ARCHIVIST_HOME" \
            -Des.config="$ARCHIVIST_HOME"/config/elasticsearch.yml \
            -Dspring.config.location="$ARCHIVIST_HOME"/config/ \
            -Dlogging.config="$ARCHIVIST_HOME"/config/logback.xml \
            "$ARCHIVIST_HOME"/lib/archivist.jar <&- &
        return $?
    fi
}

# Print command line usage / help
usage() {
    echo "Usage: $0 [-vdh] [-p pidfile] [-D prop] [-X prop]"
    echo "Start archivist."
    echo "    -d            daemonize (run in background)"
    echo "    -p pidfile    write PID to <pidfile>"
    echo "    -h"
    echo "    --help        print command line options"
    echo "    -v            print archivist version, then exit"
    echo "    -D prop       set JAVA system property"
    echo "    -X prop       set non-standard JAVA system property"
    echo "   --prop=val"
    echo "   --prop val     set archivist property (i.e. -Darchivist.<prop>=<val>)"
}

# Parse any long getopt options and put them into properties before calling getopt below
# Be dash compatible to make sure running under ubuntu works
ARGV=""
while [ $# -gt 0 ]
do
    case $1 in
      --help) ARGV="$ARGV -h"; shift;;
      --*=*) properties="$properties -Darchivist.${1#--}"
           shift 1
           ;;
      --*) [ $# -le 1 ] && {
                echo "Option requires an argument: '$1'."
                shift
                continue
            }
           properties="$properties -Darchivist.${1#--}=$2"
           shift 2
           ;;
      *) ARGV="$ARGV $1" ; shift
    esac
done

# Parse any command line options.
args=`getopt vdhp:D:X: $ARGV`
eval set -- "$args"

while true; do
    case $1 in
        -v)
            "$JAVA" $JAVA_OPTS $ARCHIVIST_JAVA_OPTS $archivist_parms -Darchivist.path.home="$ARCHIVIST_HOME" -cp "$ARCHIVIST_HOME"/lib/archivist.jar $props \
                    com.zorroa.archivist.Version
            exit 0
        ;;
        -p)
            pidfile="$2"
            shift 2
        ;;
        -d)
            daemonized="yes"
            shift
        ;;
        -h)
            usage
            exit 0
        ;;
        -D)
            properties="$properties -D$2"
            shift 2
        ;;
        -X)
            properties="$properties -X$2"
            shift 2
        ;;
        --)
            shift
            break
        ;;
        *)
            echo "Error parsing argument $1!" >&2
            usage
            exit 1
        ;;
    esac
done

# Start up the service
launch_service "$pidfile" "$daemonized" "$properties"

exit $?