/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.zorroa.common.cluster.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-06-07")
public class TaskStartT implements org.apache.thrift.TBase<TaskStartT, TaskStartT._Fields>, java.io.Serializable, Cloneable, Comparable<TaskStartT> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TaskStartT");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField JOB_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("jobId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField PARENT_FIELD_DESC = new org.apache.thrift.protocol.TField("parent", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField ENV_FIELD_DESC = new org.apache.thrift.protocol.TField("env", org.apache.thrift.protocol.TType.MAP, (short)5);
  private static final org.apache.thrift.protocol.TField ARG_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("argMap", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField WORK_DIR_FIELD_DESC = new org.apache.thrift.protocol.TField("workDir", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField SHARED_DIR_FIELD_DESC = new org.apache.thrift.protocol.TField("sharedDir", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField SCRIPT_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("scriptPath", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField LOG_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("logPath", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField SCRIPT_FIELD_DESC = new org.apache.thrift.protocol.TField("script", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField MASTER_HOST_FIELD_DESC = new org.apache.thrift.protocol.TField("masterHost", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("order", org.apache.thrift.protocol.TType.I32, (short)13);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TaskStartTStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TaskStartTTupleSchemeFactory();

  public int id; // required
  public int jobId; // required
  public int parent; // required
  public java.lang.String name; // required
  public java.util.Map<java.lang.String,java.lang.String> env; // required
  public java.nio.ByteBuffer argMap; // required
  public java.lang.String workDir; // required
  public java.lang.String sharedDir; // required
  public java.lang.String scriptPath; // required
  public java.lang.String logPath; // required
  public java.nio.ByteBuffer script; // required
  public java.lang.String masterHost; // required
  public int order; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    JOB_ID((short)2, "jobId"),
    PARENT((short)3, "parent"),
    NAME((short)4, "name"),
    ENV((short)5, "env"),
    ARG_MAP((short)6, "argMap"),
    WORK_DIR((short)7, "workDir"),
    SHARED_DIR((short)8, "sharedDir"),
    SCRIPT_PATH((short)9, "scriptPath"),
    LOG_PATH((short)10, "logPath"),
    SCRIPT((short)11, "script"),
    MASTER_HOST((short)12, "masterHost"),
    ORDER((short)13, "order");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // JOB_ID
          return JOB_ID;
        case 3: // PARENT
          return PARENT;
        case 4: // NAME
          return NAME;
        case 5: // ENV
          return ENV;
        case 6: // ARG_MAP
          return ARG_MAP;
        case 7: // WORK_DIR
          return WORK_DIR;
        case 8: // SHARED_DIR
          return SHARED_DIR;
        case 9: // SCRIPT_PATH
          return SCRIPT_PATH;
        case 10: // LOG_PATH
          return LOG_PATH;
        case 11: // SCRIPT
          return SCRIPT;
        case 12: // MASTER_HOST
          return MASTER_HOST;
        case 13: // ORDER
          return ORDER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __JOBID_ISSET_ID = 1;
  private static final int __PARENT_ISSET_ID = 2;
  private static final int __ORDER_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.JOB_ID, new org.apache.thrift.meta_data.FieldMetaData("jobId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PARENT, new org.apache.thrift.meta_data.FieldMetaData("parent", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ENV, new org.apache.thrift.meta_data.FieldMetaData("env", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.MAP        , "Attrs")));
    tmpMap.put(_Fields.ARG_MAP, new org.apache.thrift.meta_data.FieldMetaData("argMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.WORK_DIR, new org.apache.thrift.meta_data.FieldMetaData("workDir", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SHARED_DIR, new org.apache.thrift.meta_data.FieldMetaData("sharedDir", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SCRIPT_PATH, new org.apache.thrift.meta_data.FieldMetaData("scriptPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOG_PATH, new org.apache.thrift.meta_data.FieldMetaData("logPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SCRIPT, new org.apache.thrift.meta_data.FieldMetaData("script", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.MASTER_HOST, new org.apache.thrift.meta_data.FieldMetaData("masterHost", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORDER, new org.apache.thrift.meta_data.FieldMetaData("order", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TaskStartT.class, metaDataMap);
  }

  public TaskStartT() {
  }

  public TaskStartT(
    int id,
    int jobId,
    int parent,
    java.lang.String name,
    java.util.Map<java.lang.String,java.lang.String> env,
    java.nio.ByteBuffer argMap,
    java.lang.String workDir,
    java.lang.String sharedDir,
    java.lang.String scriptPath,
    java.lang.String logPath,
    java.nio.ByteBuffer script,
    java.lang.String masterHost,
    int order)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.jobId = jobId;
    setJobIdIsSet(true);
    this.parent = parent;
    setParentIsSet(true);
    this.name = name;
    this.env = env;
    this.argMap = org.apache.thrift.TBaseHelper.copyBinary(argMap);
    this.workDir = workDir;
    this.sharedDir = sharedDir;
    this.scriptPath = scriptPath;
    this.logPath = logPath;
    this.script = org.apache.thrift.TBaseHelper.copyBinary(script);
    this.masterHost = masterHost;
    this.order = order;
    setOrderIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TaskStartT(TaskStartT other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.jobId = other.jobId;
    this.parent = other.parent;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetEnv()) {
      java.util.Map<java.lang.String,java.lang.String> __this__env = new java.util.HashMap<java.lang.String,java.lang.String>(other.env);
      this.env = __this__env;
    }
    if (other.isSetArgMap()) {
      this.argMap = org.apache.thrift.TBaseHelper.copyBinary(other.argMap);
    }
    if (other.isSetWorkDir()) {
      this.workDir = other.workDir;
    }
    if (other.isSetSharedDir()) {
      this.sharedDir = other.sharedDir;
    }
    if (other.isSetScriptPath()) {
      this.scriptPath = other.scriptPath;
    }
    if (other.isSetLogPath()) {
      this.logPath = other.logPath;
    }
    if (other.isSetScript()) {
      this.script = org.apache.thrift.TBaseHelper.copyBinary(other.script);
    }
    if (other.isSetMasterHost()) {
      this.masterHost = other.masterHost;
    }
    this.order = other.order;
  }

  public TaskStartT deepCopy() {
    return new TaskStartT(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setJobIdIsSet(false);
    this.jobId = 0;
    setParentIsSet(false);
    this.parent = 0;
    this.name = null;
    this.env = null;
    this.argMap = null;
    this.workDir = null;
    this.sharedDir = null;
    this.scriptPath = null;
    this.logPath = null;
    this.script = null;
    this.masterHost = null;
    setOrderIsSet(false);
    this.order = 0;
  }

  public int getId() {
    return this.id;
  }

  public TaskStartT setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public int getJobId() {
    return this.jobId;
  }

  public TaskStartT setJobId(int jobId) {
    this.jobId = jobId;
    setJobIdIsSet(true);
    return this;
  }

  public void unsetJobId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __JOBID_ISSET_ID);
  }

  /** Returns true if field jobId is set (has been assigned a value) and false otherwise */
  public boolean isSetJobId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __JOBID_ISSET_ID);
  }

  public void setJobIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __JOBID_ISSET_ID, value);
  }

  public int getParent() {
    return this.parent;
  }

  public TaskStartT setParent(int parent) {
    this.parent = parent;
    setParentIsSet(true);
    return this;
  }

  public void unsetParent() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PARENT_ISSET_ID);
  }

  /** Returns true if field parent is set (has been assigned a value) and false otherwise */
  public boolean isSetParent() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PARENT_ISSET_ID);
  }

  public void setParentIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PARENT_ISSET_ID, value);
  }

  public java.lang.String getName() {
    return this.name;
  }

  public TaskStartT setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public int getEnvSize() {
    return (this.env == null) ? 0 : this.env.size();
  }

  public void putToEnv(java.lang.String key, java.lang.String val) {
    if (this.env == null) {
      this.env = new java.util.HashMap<java.lang.String,java.lang.String>();
    }
    this.env.put(key, val);
  }

  public java.util.Map<java.lang.String,java.lang.String> getEnv() {
    return this.env;
  }

  public TaskStartT setEnv(java.util.Map<java.lang.String,java.lang.String> env) {
    this.env = env;
    return this;
  }

  public void unsetEnv() {
    this.env = null;
  }

  /** Returns true if field env is set (has been assigned a value) and false otherwise */
  public boolean isSetEnv() {
    return this.env != null;
  }

  public void setEnvIsSet(boolean value) {
    if (!value) {
      this.env = null;
    }
  }

  public byte[] getArgMap() {
    setArgMap(org.apache.thrift.TBaseHelper.rightSize(argMap));
    return argMap == null ? null : argMap.array();
  }

  public java.nio.ByteBuffer bufferForArgMap() {
    return org.apache.thrift.TBaseHelper.copyBinary(argMap);
  }

  public TaskStartT setArgMap(byte[] argMap) {
    this.argMap = argMap == null ? (java.nio.ByteBuffer)null : java.nio.ByteBuffer.wrap(argMap.clone());
    return this;
  }

  public TaskStartT setArgMap(java.nio.ByteBuffer argMap) {
    this.argMap = org.apache.thrift.TBaseHelper.copyBinary(argMap);
    return this;
  }

  public void unsetArgMap() {
    this.argMap = null;
  }

  /** Returns true if field argMap is set (has been assigned a value) and false otherwise */
  public boolean isSetArgMap() {
    return this.argMap != null;
  }

  public void setArgMapIsSet(boolean value) {
    if (!value) {
      this.argMap = null;
    }
  }

  public java.lang.String getWorkDir() {
    return this.workDir;
  }

  public TaskStartT setWorkDir(java.lang.String workDir) {
    this.workDir = workDir;
    return this;
  }

  public void unsetWorkDir() {
    this.workDir = null;
  }

  /** Returns true if field workDir is set (has been assigned a value) and false otherwise */
  public boolean isSetWorkDir() {
    return this.workDir != null;
  }

  public void setWorkDirIsSet(boolean value) {
    if (!value) {
      this.workDir = null;
    }
  }

  public java.lang.String getSharedDir() {
    return this.sharedDir;
  }

  public TaskStartT setSharedDir(java.lang.String sharedDir) {
    this.sharedDir = sharedDir;
    return this;
  }

  public void unsetSharedDir() {
    this.sharedDir = null;
  }

  /** Returns true if field sharedDir is set (has been assigned a value) and false otherwise */
  public boolean isSetSharedDir() {
    return this.sharedDir != null;
  }

  public void setSharedDirIsSet(boolean value) {
    if (!value) {
      this.sharedDir = null;
    }
  }

  public java.lang.String getScriptPath() {
    return this.scriptPath;
  }

  public TaskStartT setScriptPath(java.lang.String scriptPath) {
    this.scriptPath = scriptPath;
    return this;
  }

  public void unsetScriptPath() {
    this.scriptPath = null;
  }

  /** Returns true if field scriptPath is set (has been assigned a value) and false otherwise */
  public boolean isSetScriptPath() {
    return this.scriptPath != null;
  }

  public void setScriptPathIsSet(boolean value) {
    if (!value) {
      this.scriptPath = null;
    }
  }

  public java.lang.String getLogPath() {
    return this.logPath;
  }

  public TaskStartT setLogPath(java.lang.String logPath) {
    this.logPath = logPath;
    return this;
  }

  public void unsetLogPath() {
    this.logPath = null;
  }

  /** Returns true if field logPath is set (has been assigned a value) and false otherwise */
  public boolean isSetLogPath() {
    return this.logPath != null;
  }

  public void setLogPathIsSet(boolean value) {
    if (!value) {
      this.logPath = null;
    }
  }

  public byte[] getScript() {
    setScript(org.apache.thrift.TBaseHelper.rightSize(script));
    return script == null ? null : script.array();
  }

  public java.nio.ByteBuffer bufferForScript() {
    return org.apache.thrift.TBaseHelper.copyBinary(script);
  }

  public TaskStartT setScript(byte[] script) {
    this.script = script == null ? (java.nio.ByteBuffer)null : java.nio.ByteBuffer.wrap(script.clone());
    return this;
  }

  public TaskStartT setScript(java.nio.ByteBuffer script) {
    this.script = org.apache.thrift.TBaseHelper.copyBinary(script);
    return this;
  }

  public void unsetScript() {
    this.script = null;
  }

  /** Returns true if field script is set (has been assigned a value) and false otherwise */
  public boolean isSetScript() {
    return this.script != null;
  }

  public void setScriptIsSet(boolean value) {
    if (!value) {
      this.script = null;
    }
  }

  public java.lang.String getMasterHost() {
    return this.masterHost;
  }

  public TaskStartT setMasterHost(java.lang.String masterHost) {
    this.masterHost = masterHost;
    return this;
  }

  public void unsetMasterHost() {
    this.masterHost = null;
  }

  /** Returns true if field masterHost is set (has been assigned a value) and false otherwise */
  public boolean isSetMasterHost() {
    return this.masterHost != null;
  }

  public void setMasterHostIsSet(boolean value) {
    if (!value) {
      this.masterHost = null;
    }
  }

  public int getOrder() {
    return this.order;
  }

  public TaskStartT setOrder(int order) {
    this.order = order;
    setOrderIsSet(true);
    return this;
  }

  public void unsetOrder() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ORDER_ISSET_ID);
  }

  /** Returns true if field order is set (has been assigned a value) and false otherwise */
  public boolean isSetOrder() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ORDER_ISSET_ID);
  }

  public void setOrderIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ORDER_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.Integer)value);
      }
      break;

    case JOB_ID:
      if (value == null) {
        unsetJobId();
      } else {
        setJobId((java.lang.Integer)value);
      }
      break;

    case PARENT:
      if (value == null) {
        unsetParent();
      } else {
        setParent((java.lang.Integer)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((java.lang.String)value);
      }
      break;

    case ENV:
      if (value == null) {
        unsetEnv();
      } else {
        setEnv((java.util.Map<java.lang.String,java.lang.String>)value);
      }
      break;

    case ARG_MAP:
      if (value == null) {
        unsetArgMap();
      } else {
        if (value instanceof byte[]) {
          setArgMap((byte[])value);
        } else {
          setArgMap((java.nio.ByteBuffer)value);
        }
      }
      break;

    case WORK_DIR:
      if (value == null) {
        unsetWorkDir();
      } else {
        setWorkDir((java.lang.String)value);
      }
      break;

    case SHARED_DIR:
      if (value == null) {
        unsetSharedDir();
      } else {
        setSharedDir((java.lang.String)value);
      }
      break;

    case SCRIPT_PATH:
      if (value == null) {
        unsetScriptPath();
      } else {
        setScriptPath((java.lang.String)value);
      }
      break;

    case LOG_PATH:
      if (value == null) {
        unsetLogPath();
      } else {
        setLogPath((java.lang.String)value);
      }
      break;

    case SCRIPT:
      if (value == null) {
        unsetScript();
      } else {
        if (value instanceof byte[]) {
          setScript((byte[])value);
        } else {
          setScript((java.nio.ByteBuffer)value);
        }
      }
      break;

    case MASTER_HOST:
      if (value == null) {
        unsetMasterHost();
      } else {
        setMasterHost((java.lang.String)value);
      }
      break;

    case ORDER:
      if (value == null) {
        unsetOrder();
      } else {
        setOrder((java.lang.Integer)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case JOB_ID:
      return getJobId();

    case PARENT:
      return getParent();

    case NAME:
      return getName();

    case ENV:
      return getEnv();

    case ARG_MAP:
      return getArgMap();

    case WORK_DIR:
      return getWorkDir();

    case SHARED_DIR:
      return getSharedDir();

    case SCRIPT_PATH:
      return getScriptPath();

    case LOG_PATH:
      return getLogPath();

    case SCRIPT:
      return getScript();

    case MASTER_HOST:
      return getMasterHost();

    case ORDER:
      return getOrder();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case JOB_ID:
      return isSetJobId();
    case PARENT:
      return isSetParent();
    case NAME:
      return isSetName();
    case ENV:
      return isSetEnv();
    case ARG_MAP:
      return isSetArgMap();
    case WORK_DIR:
      return isSetWorkDir();
    case SHARED_DIR:
      return isSetSharedDir();
    case SCRIPT_PATH:
      return isSetScriptPath();
    case LOG_PATH:
      return isSetLogPath();
    case SCRIPT:
      return isSetScript();
    case MASTER_HOST:
      return isSetMasterHost();
    case ORDER:
      return isSetOrder();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TaskStartT)
      return this.equals((TaskStartT)that);
    return false;
  }

  public boolean equals(TaskStartT that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_jobId = true;
    boolean that_present_jobId = true;
    if (this_present_jobId || that_present_jobId) {
      if (!(this_present_jobId && that_present_jobId))
        return false;
      if (this.jobId != that.jobId)
        return false;
    }

    boolean this_present_parent = true;
    boolean that_present_parent = true;
    if (this_present_parent || that_present_parent) {
      if (!(this_present_parent && that_present_parent))
        return false;
      if (this.parent != that.parent)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_env = true && this.isSetEnv();
    boolean that_present_env = true && that.isSetEnv();
    if (this_present_env || that_present_env) {
      if (!(this_present_env && that_present_env))
        return false;
      if (!this.env.equals(that.env))
        return false;
    }

    boolean this_present_argMap = true && this.isSetArgMap();
    boolean that_present_argMap = true && that.isSetArgMap();
    if (this_present_argMap || that_present_argMap) {
      if (!(this_present_argMap && that_present_argMap))
        return false;
      if (!this.argMap.equals(that.argMap))
        return false;
    }

    boolean this_present_workDir = true && this.isSetWorkDir();
    boolean that_present_workDir = true && that.isSetWorkDir();
    if (this_present_workDir || that_present_workDir) {
      if (!(this_present_workDir && that_present_workDir))
        return false;
      if (!this.workDir.equals(that.workDir))
        return false;
    }

    boolean this_present_sharedDir = true && this.isSetSharedDir();
    boolean that_present_sharedDir = true && that.isSetSharedDir();
    if (this_present_sharedDir || that_present_sharedDir) {
      if (!(this_present_sharedDir && that_present_sharedDir))
        return false;
      if (!this.sharedDir.equals(that.sharedDir))
        return false;
    }

    boolean this_present_scriptPath = true && this.isSetScriptPath();
    boolean that_present_scriptPath = true && that.isSetScriptPath();
    if (this_present_scriptPath || that_present_scriptPath) {
      if (!(this_present_scriptPath && that_present_scriptPath))
        return false;
      if (!this.scriptPath.equals(that.scriptPath))
        return false;
    }

    boolean this_present_logPath = true && this.isSetLogPath();
    boolean that_present_logPath = true && that.isSetLogPath();
    if (this_present_logPath || that_present_logPath) {
      if (!(this_present_logPath && that_present_logPath))
        return false;
      if (!this.logPath.equals(that.logPath))
        return false;
    }

    boolean this_present_script = true && this.isSetScript();
    boolean that_present_script = true && that.isSetScript();
    if (this_present_script || that_present_script) {
      if (!(this_present_script && that_present_script))
        return false;
      if (!this.script.equals(that.script))
        return false;
    }

    boolean this_present_masterHost = true && this.isSetMasterHost();
    boolean that_present_masterHost = true && that.isSetMasterHost();
    if (this_present_masterHost || that_present_masterHost) {
      if (!(this_present_masterHost && that_present_masterHost))
        return false;
      if (!this.masterHost.equals(that.masterHost))
        return false;
    }

    boolean this_present_order = true;
    boolean that_present_order = true;
    if (this_present_order || that_present_order) {
      if (!(this_present_order && that_present_order))
        return false;
      if (this.order != that.order)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + id;

    hashCode = hashCode * 8191 + jobId;

    hashCode = hashCode * 8191 + parent;

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + name.hashCode();

    hashCode = hashCode * 8191 + ((isSetEnv()) ? 131071 : 524287);
    if (isSetEnv())
      hashCode = hashCode * 8191 + env.hashCode();

    hashCode = hashCode * 8191 + ((isSetArgMap()) ? 131071 : 524287);
    if (isSetArgMap())
      hashCode = hashCode * 8191 + argMap.hashCode();

    hashCode = hashCode * 8191 + ((isSetWorkDir()) ? 131071 : 524287);
    if (isSetWorkDir())
      hashCode = hashCode * 8191 + workDir.hashCode();

    hashCode = hashCode * 8191 + ((isSetSharedDir()) ? 131071 : 524287);
    if (isSetSharedDir())
      hashCode = hashCode * 8191 + sharedDir.hashCode();

    hashCode = hashCode * 8191 + ((isSetScriptPath()) ? 131071 : 524287);
    if (isSetScriptPath())
      hashCode = hashCode * 8191 + scriptPath.hashCode();

    hashCode = hashCode * 8191 + ((isSetLogPath()) ? 131071 : 524287);
    if (isSetLogPath())
      hashCode = hashCode * 8191 + logPath.hashCode();

    hashCode = hashCode * 8191 + ((isSetScript()) ? 131071 : 524287);
    if (isSetScript())
      hashCode = hashCode * 8191 + script.hashCode();

    hashCode = hashCode * 8191 + ((isSetMasterHost()) ? 131071 : 524287);
    if (isSetMasterHost())
      hashCode = hashCode * 8191 + masterHost.hashCode();

    hashCode = hashCode * 8191 + order;

    return hashCode;
  }

  @Override
  public int compareTo(TaskStartT other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetJobId()).compareTo(other.isSetJobId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJobId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobId, other.jobId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetParent()).compareTo(other.isSetParent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parent, other.parent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEnv()).compareTo(other.isSetEnv());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnv()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.env, other.env);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetArgMap()).compareTo(other.isSetArgMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArgMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.argMap, other.argMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetWorkDir()).compareTo(other.isSetWorkDir());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWorkDir()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.workDir, other.workDir);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSharedDir()).compareTo(other.isSetSharedDir());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSharedDir()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sharedDir, other.sharedDir);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetScriptPath()).compareTo(other.isSetScriptPath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScriptPath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scriptPath, other.scriptPath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLogPath()).compareTo(other.isSetLogPath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLogPath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logPath, other.logPath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetScript()).compareTo(other.isSetScript());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScript()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.script, other.script);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMasterHost()).compareTo(other.isSetMasterHost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMasterHost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.masterHost, other.masterHost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOrder()).compareTo(other.isSetOrder());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrder()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.order, other.order);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TaskStartT(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("jobId:");
    sb.append(this.jobId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("parent:");
    sb.append(this.parent);
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("env:");
    if (this.env == null) {
      sb.append("null");
    } else {
      sb.append(this.env);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("argMap:");
    if (this.argMap == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.argMap, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("workDir:");
    if (this.workDir == null) {
      sb.append("null");
    } else {
      sb.append(this.workDir);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sharedDir:");
    if (this.sharedDir == null) {
      sb.append("null");
    } else {
      sb.append(this.sharedDir);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("scriptPath:");
    if (this.scriptPath == null) {
      sb.append("null");
    } else {
      sb.append(this.scriptPath);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("logPath:");
    if (this.logPath == null) {
      sb.append("null");
    } else {
      sb.append(this.logPath);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("script:");
    if (this.script == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.script, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("masterHost:");
    if (this.masterHost == null) {
      sb.append("null");
    } else {
      sb.append(this.masterHost);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("order:");
    sb.append(this.order);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TaskStartTStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TaskStartTStandardScheme getScheme() {
      return new TaskStartTStandardScheme();
    }
  }

  private static class TaskStartTStandardScheme extends org.apache.thrift.scheme.StandardScheme<TaskStartT> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TaskStartT struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // JOB_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.jobId = iprot.readI32();
              struct.setJobIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PARENT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.parent = iprot.readI32();
              struct.setParentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ENV
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.env = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map0.size);
                java.lang.String _key1;
                java.lang.String _val2;
                for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                {
                  _key1 = iprot.readString();
                  _val2 = iprot.readString();
                  struct.env.put(_key1, _val2);
                }
                iprot.readMapEnd();
              }
              struct.setEnvIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ARG_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.argMap = iprot.readBinary();
              struct.setArgMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // WORK_DIR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.workDir = iprot.readString();
              struct.setWorkDirIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SHARED_DIR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sharedDir = iprot.readString();
              struct.setSharedDirIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SCRIPT_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.scriptPath = iprot.readString();
              struct.setScriptPathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // LOG_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.logPath = iprot.readString();
              struct.setLogPathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // SCRIPT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.script = iprot.readBinary();
              struct.setScriptIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // MASTER_HOST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.masterHost = iprot.readString();
              struct.setMasterHostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // ORDER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.order = iprot.readI32();
              struct.setOrderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TaskStartT struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(JOB_ID_FIELD_DESC);
      oprot.writeI32(struct.jobId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PARENT_FIELD_DESC);
      oprot.writeI32(struct.parent);
      oprot.writeFieldEnd();
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.env != null) {
        oprot.writeFieldBegin(ENV_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.env.size()));
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter4 : struct.env.entrySet())
          {
            oprot.writeString(_iter4.getKey());
            oprot.writeString(_iter4.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.argMap != null) {
        oprot.writeFieldBegin(ARG_MAP_FIELD_DESC);
        oprot.writeBinary(struct.argMap);
        oprot.writeFieldEnd();
      }
      if (struct.workDir != null) {
        oprot.writeFieldBegin(WORK_DIR_FIELD_DESC);
        oprot.writeString(struct.workDir);
        oprot.writeFieldEnd();
      }
      if (struct.sharedDir != null) {
        oprot.writeFieldBegin(SHARED_DIR_FIELD_DESC);
        oprot.writeString(struct.sharedDir);
        oprot.writeFieldEnd();
      }
      if (struct.scriptPath != null) {
        oprot.writeFieldBegin(SCRIPT_PATH_FIELD_DESC);
        oprot.writeString(struct.scriptPath);
        oprot.writeFieldEnd();
      }
      if (struct.logPath != null) {
        oprot.writeFieldBegin(LOG_PATH_FIELD_DESC);
        oprot.writeString(struct.logPath);
        oprot.writeFieldEnd();
      }
      if (struct.script != null) {
        oprot.writeFieldBegin(SCRIPT_FIELD_DESC);
        oprot.writeBinary(struct.script);
        oprot.writeFieldEnd();
      }
      if (struct.masterHost != null) {
        oprot.writeFieldBegin(MASTER_HOST_FIELD_DESC);
        oprot.writeString(struct.masterHost);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ORDER_FIELD_DESC);
      oprot.writeI32(struct.order);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TaskStartTTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TaskStartTTupleScheme getScheme() {
      return new TaskStartTTupleScheme();
    }
  }

  private static class TaskStartTTupleScheme extends org.apache.thrift.scheme.TupleScheme<TaskStartT> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TaskStartT struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetJobId()) {
        optionals.set(1);
      }
      if (struct.isSetParent()) {
        optionals.set(2);
      }
      if (struct.isSetName()) {
        optionals.set(3);
      }
      if (struct.isSetEnv()) {
        optionals.set(4);
      }
      if (struct.isSetArgMap()) {
        optionals.set(5);
      }
      if (struct.isSetWorkDir()) {
        optionals.set(6);
      }
      if (struct.isSetSharedDir()) {
        optionals.set(7);
      }
      if (struct.isSetScriptPath()) {
        optionals.set(8);
      }
      if (struct.isSetLogPath()) {
        optionals.set(9);
      }
      if (struct.isSetScript()) {
        optionals.set(10);
      }
      if (struct.isSetMasterHost()) {
        optionals.set(11);
      }
      if (struct.isSetOrder()) {
        optionals.set(12);
      }
      oprot.writeBitSet(optionals, 13);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetJobId()) {
        oprot.writeI32(struct.jobId);
      }
      if (struct.isSetParent()) {
        oprot.writeI32(struct.parent);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetEnv()) {
        {
          oprot.writeI32(struct.env.size());
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter5 : struct.env.entrySet())
          {
            oprot.writeString(_iter5.getKey());
            oprot.writeString(_iter5.getValue());
          }
        }
      }
      if (struct.isSetArgMap()) {
        oprot.writeBinary(struct.argMap);
      }
      if (struct.isSetWorkDir()) {
        oprot.writeString(struct.workDir);
      }
      if (struct.isSetSharedDir()) {
        oprot.writeString(struct.sharedDir);
      }
      if (struct.isSetScriptPath()) {
        oprot.writeString(struct.scriptPath);
      }
      if (struct.isSetLogPath()) {
        oprot.writeString(struct.logPath);
      }
      if (struct.isSetScript()) {
        oprot.writeBinary(struct.script);
      }
      if (struct.isSetMasterHost()) {
        oprot.writeString(struct.masterHost);
      }
      if (struct.isSetOrder()) {
        oprot.writeI32(struct.order);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TaskStartT struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(13);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.jobId = iprot.readI32();
        struct.setJobIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.parent = iprot.readI32();
        struct.setParentIsSet(true);
      }
      if (incoming.get(3)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TMap _map6 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.env = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map6.size);
          java.lang.String _key7;
          java.lang.String _val8;
          for (int _i9 = 0; _i9 < _map6.size; ++_i9)
          {
            _key7 = iprot.readString();
            _val8 = iprot.readString();
            struct.env.put(_key7, _val8);
          }
        }
        struct.setEnvIsSet(true);
      }
      if (incoming.get(5)) {
        struct.argMap = iprot.readBinary();
        struct.setArgMapIsSet(true);
      }
      if (incoming.get(6)) {
        struct.workDir = iprot.readString();
        struct.setWorkDirIsSet(true);
      }
      if (incoming.get(7)) {
        struct.sharedDir = iprot.readString();
        struct.setSharedDirIsSet(true);
      }
      if (incoming.get(8)) {
        struct.scriptPath = iprot.readString();
        struct.setScriptPathIsSet(true);
      }
      if (incoming.get(9)) {
        struct.logPath = iprot.readString();
        struct.setLogPathIsSet(true);
      }
      if (incoming.get(10)) {
        struct.script = iprot.readBinary();
        struct.setScriptIsSet(true);
      }
      if (incoming.get(11)) {
        struct.masterHost = iprot.readString();
        struct.setMasterHostIsSet(true);
      }
      if (incoming.get(12)) {
        struct.order = iprot.readI32();
        struct.setOrderIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

