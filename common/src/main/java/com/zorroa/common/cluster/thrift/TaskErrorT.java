/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.zorroa.common.cluster.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-09-11")
public class TaskErrorT implements org.apache.thrift.TBase<TaskErrorT, TaskErrorT._Fields>, java.io.Serializable, Cloneable, Comparable<TaskErrorT> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TaskErrorT");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("path", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ORIGIN_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("originPath", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ORIGIN_SERVICE_FIELD_DESC = new org.apache.thrift.protocol.TField("originService", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("message", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField PROCESSOR_FIELD_DESC = new org.apache.thrift.protocol.TField("processor", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField PHASE_FIELD_DESC = new org.apache.thrift.protocol.TField("phase", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField SKIPPED_FIELD_DESC = new org.apache.thrift.protocol.TField("skipped", org.apache.thrift.protocol.TType.BOOL, (short)8);
  private static final org.apache.thrift.protocol.TField STACK_FIELD_DESC = new org.apache.thrift.protocol.TField("stack", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short)13);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TaskErrorTStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TaskErrorTTupleSchemeFactory();

  public java.lang.String id; // required
  public java.lang.String path; // required
  public java.lang.String originPath; // required
  public java.lang.String originService; // required
  public java.lang.String message; // required
  public java.lang.String processor; // required
  public java.lang.String phase; // required
  public boolean skipped; // required
  public java.util.List<StackElementT> stack; // required
  public long timestamp; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    PATH((short)2, "path"),
    ORIGIN_PATH((short)3, "originPath"),
    ORIGIN_SERVICE((short)4, "originService"),
    MESSAGE((short)5, "message"),
    PROCESSOR((short)6, "processor"),
    PHASE((short)7, "phase"),
    SKIPPED((short)8, "skipped"),
    STACK((short)9, "stack"),
    TIMESTAMP((short)13, "timestamp");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // PATH
          return PATH;
        case 3: // ORIGIN_PATH
          return ORIGIN_PATH;
        case 4: // ORIGIN_SERVICE
          return ORIGIN_SERVICE;
        case 5: // MESSAGE
          return MESSAGE;
        case 6: // PROCESSOR
          return PROCESSOR;
        case 7: // PHASE
          return PHASE;
        case 8: // SKIPPED
          return SKIPPED;
        case 9: // STACK
          return STACK;
        case 13: // TIMESTAMP
          return TIMESTAMP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SKIPPED_ISSET_ID = 0;
  private static final int __TIMESTAMP_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PATH, new org.apache.thrift.meta_data.FieldMetaData("path", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORIGIN_PATH, new org.apache.thrift.meta_data.FieldMetaData("originPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORIGIN_SERVICE, new org.apache.thrift.meta_data.FieldMetaData("originService", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("message", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROCESSOR, new org.apache.thrift.meta_data.FieldMetaData("processor", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PHASE, new org.apache.thrift.meta_data.FieldMetaData("phase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SKIPPED, new org.apache.thrift.meta_data.FieldMetaData("skipped", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.STACK, new org.apache.thrift.meta_data.FieldMetaData("stack", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StackElementT.class))));
    tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TaskErrorT.class, metaDataMap);
  }

  public TaskErrorT() {
  }

  public TaskErrorT(
    java.lang.String id,
    java.lang.String path,
    java.lang.String originPath,
    java.lang.String originService,
    java.lang.String message,
    java.lang.String processor,
    java.lang.String phase,
    boolean skipped,
    java.util.List<StackElementT> stack,
    long timestamp)
  {
    this();
    this.id = id;
    this.path = path;
    this.originPath = originPath;
    this.originService = originService;
    this.message = message;
    this.processor = processor;
    this.phase = phase;
    this.skipped = skipped;
    setSkippedIsSet(true);
    this.stack = stack;
    this.timestamp = timestamp;
    setTimestampIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TaskErrorT(TaskErrorT other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetPath()) {
      this.path = other.path;
    }
    if (other.isSetOriginPath()) {
      this.originPath = other.originPath;
    }
    if (other.isSetOriginService()) {
      this.originService = other.originService;
    }
    if (other.isSetMessage()) {
      this.message = other.message;
    }
    if (other.isSetProcessor()) {
      this.processor = other.processor;
    }
    if (other.isSetPhase()) {
      this.phase = other.phase;
    }
    this.skipped = other.skipped;
    if (other.isSetStack()) {
      java.util.List<StackElementT> __this__stack = new java.util.ArrayList<StackElementT>(other.stack.size());
      for (StackElementT other_element : other.stack) {
        __this__stack.add(new StackElementT(other_element));
      }
      this.stack = __this__stack;
    }
    this.timestamp = other.timestamp;
  }

  public TaskErrorT deepCopy() {
    return new TaskErrorT(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.path = null;
    this.originPath = null;
    this.originService = null;
    this.message = null;
    this.processor = null;
    this.phase = null;
    setSkippedIsSet(false);
    this.skipped = false;
    this.stack = null;
    setTimestampIsSet(false);
    this.timestamp = 0;
  }

  public java.lang.String getId() {
    return this.id;
  }

  public TaskErrorT setId(java.lang.String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public java.lang.String getPath() {
    return this.path;
  }

  public TaskErrorT setPath(java.lang.String path) {
    this.path = path;
    return this;
  }

  public void unsetPath() {
    this.path = null;
  }

  /** Returns true if field path is set (has been assigned a value) and false otherwise */
  public boolean isSetPath() {
    return this.path != null;
  }

  public void setPathIsSet(boolean value) {
    if (!value) {
      this.path = null;
    }
  }

  public java.lang.String getOriginPath() {
    return this.originPath;
  }

  public TaskErrorT setOriginPath(java.lang.String originPath) {
    this.originPath = originPath;
    return this;
  }

  public void unsetOriginPath() {
    this.originPath = null;
  }

  /** Returns true if field originPath is set (has been assigned a value) and false otherwise */
  public boolean isSetOriginPath() {
    return this.originPath != null;
  }

  public void setOriginPathIsSet(boolean value) {
    if (!value) {
      this.originPath = null;
    }
  }

  public java.lang.String getOriginService() {
    return this.originService;
  }

  public TaskErrorT setOriginService(java.lang.String originService) {
    this.originService = originService;
    return this;
  }

  public void unsetOriginService() {
    this.originService = null;
  }

  /** Returns true if field originService is set (has been assigned a value) and false otherwise */
  public boolean isSetOriginService() {
    return this.originService != null;
  }

  public void setOriginServiceIsSet(boolean value) {
    if (!value) {
      this.originService = null;
    }
  }

  public java.lang.String getMessage() {
    return this.message;
  }

  public TaskErrorT setMessage(java.lang.String message) {
    this.message = message;
    return this;
  }

  public void unsetMessage() {
    this.message = null;
  }

  /** Returns true if field message is set (has been assigned a value) and false otherwise */
  public boolean isSetMessage() {
    return this.message != null;
  }

  public void setMessageIsSet(boolean value) {
    if (!value) {
      this.message = null;
    }
  }

  public java.lang.String getProcessor() {
    return this.processor;
  }

  public TaskErrorT setProcessor(java.lang.String processor) {
    this.processor = processor;
    return this;
  }

  public void unsetProcessor() {
    this.processor = null;
  }

  /** Returns true if field processor is set (has been assigned a value) and false otherwise */
  public boolean isSetProcessor() {
    return this.processor != null;
  }

  public void setProcessorIsSet(boolean value) {
    if (!value) {
      this.processor = null;
    }
  }

  public java.lang.String getPhase() {
    return this.phase;
  }

  public TaskErrorT setPhase(java.lang.String phase) {
    this.phase = phase;
    return this;
  }

  public void unsetPhase() {
    this.phase = null;
  }

  /** Returns true if field phase is set (has been assigned a value) and false otherwise */
  public boolean isSetPhase() {
    return this.phase != null;
  }

  public void setPhaseIsSet(boolean value) {
    if (!value) {
      this.phase = null;
    }
  }

  public boolean isSkipped() {
    return this.skipped;
  }

  public TaskErrorT setSkipped(boolean skipped) {
    this.skipped = skipped;
    setSkippedIsSet(true);
    return this;
  }

  public void unsetSkipped() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SKIPPED_ISSET_ID);
  }

  /** Returns true if field skipped is set (has been assigned a value) and false otherwise */
  public boolean isSetSkipped() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SKIPPED_ISSET_ID);
  }

  public void setSkippedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SKIPPED_ISSET_ID, value);
  }

  public int getStackSize() {
    return (this.stack == null) ? 0 : this.stack.size();
  }

  public java.util.Iterator<StackElementT> getStackIterator() {
    return (this.stack == null) ? null : this.stack.iterator();
  }

  public void addToStack(StackElementT elem) {
    if (this.stack == null) {
      this.stack = new java.util.ArrayList<StackElementT>();
    }
    this.stack.add(elem);
  }

  public java.util.List<StackElementT> getStack() {
    return this.stack;
  }

  public TaskErrorT setStack(java.util.List<StackElementT> stack) {
    this.stack = stack;
    return this;
  }

  public void unsetStack() {
    this.stack = null;
  }

  /** Returns true if field stack is set (has been assigned a value) and false otherwise */
  public boolean isSetStack() {
    return this.stack != null;
  }

  public void setStackIsSet(boolean value) {
    if (!value) {
      this.stack = null;
    }
  }

  public long getTimestamp() {
    return this.timestamp;
  }

  public TaskErrorT setTimestamp(long timestamp) {
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    return this;
  }

  public void unsetTimestamp() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestamp() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  public void setTimestampIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.String)value);
      }
      break;

    case PATH:
      if (value == null) {
        unsetPath();
      } else {
        setPath((java.lang.String)value);
      }
      break;

    case ORIGIN_PATH:
      if (value == null) {
        unsetOriginPath();
      } else {
        setOriginPath((java.lang.String)value);
      }
      break;

    case ORIGIN_SERVICE:
      if (value == null) {
        unsetOriginService();
      } else {
        setOriginService((java.lang.String)value);
      }
      break;

    case MESSAGE:
      if (value == null) {
        unsetMessage();
      } else {
        setMessage((java.lang.String)value);
      }
      break;

    case PROCESSOR:
      if (value == null) {
        unsetProcessor();
      } else {
        setProcessor((java.lang.String)value);
      }
      break;

    case PHASE:
      if (value == null) {
        unsetPhase();
      } else {
        setPhase((java.lang.String)value);
      }
      break;

    case SKIPPED:
      if (value == null) {
        unsetSkipped();
      } else {
        setSkipped((java.lang.Boolean)value);
      }
      break;

    case STACK:
      if (value == null) {
        unsetStack();
      } else {
        setStack((java.util.List<StackElementT>)value);
      }
      break;

    case TIMESTAMP:
      if (value == null) {
        unsetTimestamp();
      } else {
        setTimestamp((java.lang.Long)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case PATH:
      return getPath();

    case ORIGIN_PATH:
      return getOriginPath();

    case ORIGIN_SERVICE:
      return getOriginService();

    case MESSAGE:
      return getMessage();

    case PROCESSOR:
      return getProcessor();

    case PHASE:
      return getPhase();

    case SKIPPED:
      return isSkipped();

    case STACK:
      return getStack();

    case TIMESTAMP:
      return getTimestamp();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case PATH:
      return isSetPath();
    case ORIGIN_PATH:
      return isSetOriginPath();
    case ORIGIN_SERVICE:
      return isSetOriginService();
    case MESSAGE:
      return isSetMessage();
    case PROCESSOR:
      return isSetProcessor();
    case PHASE:
      return isSetPhase();
    case SKIPPED:
      return isSetSkipped();
    case STACK:
      return isSetStack();
    case TIMESTAMP:
      return isSetTimestamp();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TaskErrorT)
      return this.equals((TaskErrorT)that);
    return false;
  }

  public boolean equals(TaskErrorT that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_path = true && this.isSetPath();
    boolean that_present_path = true && that.isSetPath();
    if (this_present_path || that_present_path) {
      if (!(this_present_path && that_present_path))
        return false;
      if (!this.path.equals(that.path))
        return false;
    }

    boolean this_present_originPath = true && this.isSetOriginPath();
    boolean that_present_originPath = true && that.isSetOriginPath();
    if (this_present_originPath || that_present_originPath) {
      if (!(this_present_originPath && that_present_originPath))
        return false;
      if (!this.originPath.equals(that.originPath))
        return false;
    }

    boolean this_present_originService = true && this.isSetOriginService();
    boolean that_present_originService = true && that.isSetOriginService();
    if (this_present_originService || that_present_originService) {
      if (!(this_present_originService && that_present_originService))
        return false;
      if (!this.originService.equals(that.originService))
        return false;
    }

    boolean this_present_message = true && this.isSetMessage();
    boolean that_present_message = true && that.isSetMessage();
    if (this_present_message || that_present_message) {
      if (!(this_present_message && that_present_message))
        return false;
      if (!this.message.equals(that.message))
        return false;
    }

    boolean this_present_processor = true && this.isSetProcessor();
    boolean that_present_processor = true && that.isSetProcessor();
    if (this_present_processor || that_present_processor) {
      if (!(this_present_processor && that_present_processor))
        return false;
      if (!this.processor.equals(that.processor))
        return false;
    }

    boolean this_present_phase = true && this.isSetPhase();
    boolean that_present_phase = true && that.isSetPhase();
    if (this_present_phase || that_present_phase) {
      if (!(this_present_phase && that_present_phase))
        return false;
      if (!this.phase.equals(that.phase))
        return false;
    }

    boolean this_present_skipped = true;
    boolean that_present_skipped = true;
    if (this_present_skipped || that_present_skipped) {
      if (!(this_present_skipped && that_present_skipped))
        return false;
      if (this.skipped != that.skipped)
        return false;
    }

    boolean this_present_stack = true && this.isSetStack();
    boolean that_present_stack = true && that.isSetStack();
    if (this_present_stack || that_present_stack) {
      if (!(this_present_stack && that_present_stack))
        return false;
      if (!this.stack.equals(that.stack))
        return false;
    }

    boolean this_present_timestamp = true;
    boolean that_present_timestamp = true;
    if (this_present_timestamp || that_present_timestamp) {
      if (!(this_present_timestamp && that_present_timestamp))
        return false;
      if (this.timestamp != that.timestamp)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id.hashCode();

    hashCode = hashCode * 8191 + ((isSetPath()) ? 131071 : 524287);
    if (isSetPath())
      hashCode = hashCode * 8191 + path.hashCode();

    hashCode = hashCode * 8191 + ((isSetOriginPath()) ? 131071 : 524287);
    if (isSetOriginPath())
      hashCode = hashCode * 8191 + originPath.hashCode();

    hashCode = hashCode * 8191 + ((isSetOriginService()) ? 131071 : 524287);
    if (isSetOriginService())
      hashCode = hashCode * 8191 + originService.hashCode();

    hashCode = hashCode * 8191 + ((isSetMessage()) ? 131071 : 524287);
    if (isSetMessage())
      hashCode = hashCode * 8191 + message.hashCode();

    hashCode = hashCode * 8191 + ((isSetProcessor()) ? 131071 : 524287);
    if (isSetProcessor())
      hashCode = hashCode * 8191 + processor.hashCode();

    hashCode = hashCode * 8191 + ((isSetPhase()) ? 131071 : 524287);
    if (isSetPhase())
      hashCode = hashCode * 8191 + phase.hashCode();

    hashCode = hashCode * 8191 + ((skipped) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetStack()) ? 131071 : 524287);
    if (isSetStack())
      hashCode = hashCode * 8191 + stack.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(timestamp);

    return hashCode;
  }

  @Override
  public int compareTo(TaskErrorT other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPath()).compareTo(other.isSetPath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.path, other.path);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOriginPath()).compareTo(other.isSetOriginPath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOriginPath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originPath, other.originPath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOriginService()).compareTo(other.isSetOriginService());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOriginService()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originService, other.originService);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMessage()).compareTo(other.isSetMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, other.message);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetProcessor()).compareTo(other.isSetProcessor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProcessor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.processor, other.processor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPhase()).compareTo(other.isSetPhase());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPhase()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phase, other.phase);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSkipped()).compareTo(other.isSetSkipped());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSkipped()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.skipped, other.skipped);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStack()).compareTo(other.isSetStack());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStack()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stack, other.stack);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTimestamp()).compareTo(other.isSetTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TaskErrorT(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("path:");
    if (this.path == null) {
      sb.append("null");
    } else {
      sb.append(this.path);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("originPath:");
    if (this.originPath == null) {
      sb.append("null");
    } else {
      sb.append(this.originPath);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("originService:");
    if (this.originService == null) {
      sb.append("null");
    } else {
      sb.append(this.originService);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("message:");
    if (this.message == null) {
      sb.append("null");
    } else {
      sb.append(this.message);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("processor:");
    if (this.processor == null) {
      sb.append("null");
    } else {
      sb.append(this.processor);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("phase:");
    if (this.phase == null) {
      sb.append("null");
    } else {
      sb.append(this.phase);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("skipped:");
    sb.append(this.skipped);
    first = false;
    if (!first) sb.append(", ");
    sb.append("stack:");
    if (this.stack == null) {
      sb.append("null");
    } else {
      sb.append(this.stack);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("timestamp:");
    sb.append(this.timestamp);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TaskErrorTStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TaskErrorTStandardScheme getScheme() {
      return new TaskErrorTStandardScheme();
    }
  }

  private static class TaskErrorTStandardScheme extends org.apache.thrift.scheme.StandardScheme<TaskErrorT> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TaskErrorT struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.path = iprot.readString();
              struct.setPathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ORIGIN_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.originPath = iprot.readString();
              struct.setOriginPathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ORIGIN_SERVICE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.originService = iprot.readString();
              struct.setOriginServiceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.message = iprot.readString();
              struct.setMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PROCESSOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.processor = iprot.readString();
              struct.setProcessorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PHASE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.phase = iprot.readString();
              struct.setPhaseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SKIPPED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.skipped = iprot.readBool();
              struct.setSkippedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // STACK
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list10 = iprot.readListBegin();
                struct.stack = new java.util.ArrayList<StackElementT>(_list10.size);
                StackElementT _elem11;
                for (int _i12 = 0; _i12 < _list10.size; ++_i12)
                {
                  _elem11 = new StackElementT();
                  _elem11.read(iprot);
                  struct.stack.add(_elem11);
                }
                iprot.readListEnd();
              }
              struct.setStackIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.timestamp = iprot.readI64();
              struct.setTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TaskErrorT struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.path != null) {
        oprot.writeFieldBegin(PATH_FIELD_DESC);
        oprot.writeString(struct.path);
        oprot.writeFieldEnd();
      }
      if (struct.originPath != null) {
        oprot.writeFieldBegin(ORIGIN_PATH_FIELD_DESC);
        oprot.writeString(struct.originPath);
        oprot.writeFieldEnd();
      }
      if (struct.originService != null) {
        oprot.writeFieldBegin(ORIGIN_SERVICE_FIELD_DESC);
        oprot.writeString(struct.originService);
        oprot.writeFieldEnd();
      }
      if (struct.message != null) {
        oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
        oprot.writeString(struct.message);
        oprot.writeFieldEnd();
      }
      if (struct.processor != null) {
        oprot.writeFieldBegin(PROCESSOR_FIELD_DESC);
        oprot.writeString(struct.processor);
        oprot.writeFieldEnd();
      }
      if (struct.phase != null) {
        oprot.writeFieldBegin(PHASE_FIELD_DESC);
        oprot.writeString(struct.phase);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SKIPPED_FIELD_DESC);
      oprot.writeBool(struct.skipped);
      oprot.writeFieldEnd();
      if (struct.stack != null) {
        oprot.writeFieldBegin(STACK_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.stack.size()));
          for (StackElementT _iter13 : struct.stack)
          {
            _iter13.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
      oprot.writeI64(struct.timestamp);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TaskErrorTTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TaskErrorTTupleScheme getScheme() {
      return new TaskErrorTTupleScheme();
    }
  }

  private static class TaskErrorTTupleScheme extends org.apache.thrift.scheme.TupleScheme<TaskErrorT> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TaskErrorT struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetPath()) {
        optionals.set(1);
      }
      if (struct.isSetOriginPath()) {
        optionals.set(2);
      }
      if (struct.isSetOriginService()) {
        optionals.set(3);
      }
      if (struct.isSetMessage()) {
        optionals.set(4);
      }
      if (struct.isSetProcessor()) {
        optionals.set(5);
      }
      if (struct.isSetPhase()) {
        optionals.set(6);
      }
      if (struct.isSetSkipped()) {
        optionals.set(7);
      }
      if (struct.isSetStack()) {
        optionals.set(8);
      }
      if (struct.isSetTimestamp()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetPath()) {
        oprot.writeString(struct.path);
      }
      if (struct.isSetOriginPath()) {
        oprot.writeString(struct.originPath);
      }
      if (struct.isSetOriginService()) {
        oprot.writeString(struct.originService);
      }
      if (struct.isSetMessage()) {
        oprot.writeString(struct.message);
      }
      if (struct.isSetProcessor()) {
        oprot.writeString(struct.processor);
      }
      if (struct.isSetPhase()) {
        oprot.writeString(struct.phase);
      }
      if (struct.isSetSkipped()) {
        oprot.writeBool(struct.skipped);
      }
      if (struct.isSetStack()) {
        {
          oprot.writeI32(struct.stack.size());
          for (StackElementT _iter14 : struct.stack)
          {
            _iter14.write(oprot);
          }
        }
      }
      if (struct.isSetTimestamp()) {
        oprot.writeI64(struct.timestamp);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TaskErrorT struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.path = iprot.readString();
        struct.setPathIsSet(true);
      }
      if (incoming.get(2)) {
        struct.originPath = iprot.readString();
        struct.setOriginPathIsSet(true);
      }
      if (incoming.get(3)) {
        struct.originService = iprot.readString();
        struct.setOriginServiceIsSet(true);
      }
      if (incoming.get(4)) {
        struct.message = iprot.readString();
        struct.setMessageIsSet(true);
      }
      if (incoming.get(5)) {
        struct.processor = iprot.readString();
        struct.setProcessorIsSet(true);
      }
      if (incoming.get(6)) {
        struct.phase = iprot.readString();
        struct.setPhaseIsSet(true);
      }
      if (incoming.get(7)) {
        struct.skipped = iprot.readBool();
        struct.setSkippedIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list15 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.stack = new java.util.ArrayList<StackElementT>(_list15.size);
          StackElementT _elem16;
          for (int _i17 = 0; _i17 < _list15.size; ++_i17)
          {
            _elem16 = new StackElementT();
            _elem16.read(iprot);
            struct.stack.add(_elem16);
          }
        }
        struct.setStackIsSet(true);
      }
      if (incoming.get(9)) {
        struct.timestamp = iprot.readI64();
        struct.setTimestampIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

