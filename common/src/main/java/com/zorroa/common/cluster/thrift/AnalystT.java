/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.zorroa.common.cluster.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-06-07")
public class AnalystT implements org.apache.thrift.TBase<AnalystT, AnalystT._Fields>, java.io.Serializable, Cloneable, Comparable<AnalystT> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AnalystT");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ARCH_FIELD_DESC = new org.apache.thrift.protocol.TField("arch", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField OS_FIELD_DESC = new org.apache.thrift.protocol.TField("os", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField URL_FIELD_DESC = new org.apache.thrift.protocol.TField("url", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("port", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField THREAD_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("threadCount", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("data", org.apache.thrift.protocol.TType.BOOL, (short)7);
  private static final org.apache.thrift.protocol.TField MASTER_FIELD_DESC = new org.apache.thrift.protocol.TField("master", org.apache.thrift.protocol.TType.BOOL, (short)8);
  private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField TASK_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("taskIds", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField UPDATED_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("updatedTime", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField THREADS_USED_FIELD_DESC = new org.apache.thrift.protocol.TField("threadsUsed", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField QUEUE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("queueSize", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField LOAD_AVG_FIELD_DESC = new org.apache.thrift.protocol.TField("loadAvg", org.apache.thrift.protocol.TType.DOUBLE, (short)14);
  private static final org.apache.thrift.protocol.TField METRICS_FIELD_DESC = new org.apache.thrift.protocol.TField("metrics", org.apache.thrift.protocol.TType.STRING, (short)15);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new AnalystTStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new AnalystTTupleSchemeFactory();

  public java.lang.String id; // required
  public java.lang.String arch; // required
  public java.lang.String os; // required
  public java.lang.String url; // required
  public int port; // required
  public int threadCount; // required
  public boolean data; // required
  public boolean master; // required
  public int state; // required
  public java.util.List<java.lang.Integer> taskIds; // required
  public long updatedTime; // required
  public int threadsUsed; // required
  public int queueSize; // required
  public double loadAvg; // required
  public java.nio.ByteBuffer metrics; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    ARCH((short)2, "arch"),
    OS((short)3, "os"),
    URL((short)4, "url"),
    PORT((short)5, "port"),
    THREAD_COUNT((short)6, "threadCount"),
    DATA((short)7, "data"),
    MASTER((short)8, "master"),
    STATE((short)9, "state"),
    TASK_IDS((short)10, "taskIds"),
    UPDATED_TIME((short)11, "updatedTime"),
    THREADS_USED((short)12, "threadsUsed"),
    QUEUE_SIZE((short)13, "queueSize"),
    LOAD_AVG((short)14, "loadAvg"),
    METRICS((short)15, "metrics");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // ARCH
          return ARCH;
        case 3: // OS
          return OS;
        case 4: // URL
          return URL;
        case 5: // PORT
          return PORT;
        case 6: // THREAD_COUNT
          return THREAD_COUNT;
        case 7: // DATA
          return DATA;
        case 8: // MASTER
          return MASTER;
        case 9: // STATE
          return STATE;
        case 10: // TASK_IDS
          return TASK_IDS;
        case 11: // UPDATED_TIME
          return UPDATED_TIME;
        case 12: // THREADS_USED
          return THREADS_USED;
        case 13: // QUEUE_SIZE
          return QUEUE_SIZE;
        case 14: // LOAD_AVG
          return LOAD_AVG;
        case 15: // METRICS
          return METRICS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PORT_ISSET_ID = 0;
  private static final int __THREADCOUNT_ISSET_ID = 1;
  private static final int __DATA_ISSET_ID = 2;
  private static final int __MASTER_ISSET_ID = 3;
  private static final int __STATE_ISSET_ID = 4;
  private static final int __UPDATEDTIME_ISSET_ID = 5;
  private static final int __THREADSUSED_ISSET_ID = 6;
  private static final int __QUEUESIZE_ISSET_ID = 7;
  private static final int __LOADAVG_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ARCH, new org.apache.thrift.meta_data.FieldMetaData("arch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OS, new org.apache.thrift.meta_data.FieldMetaData("os", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.URL, new org.apache.thrift.meta_data.FieldMetaData("url", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PORT, new org.apache.thrift.meta_data.FieldMetaData("port", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.THREAD_COUNT, new org.apache.thrift.meta_data.FieldMetaData("threadCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.MASTER, new org.apache.thrift.meta_data.FieldMetaData("master", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TASK_IDS, new org.apache.thrift.meta_data.FieldMetaData("taskIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.UPDATED_TIME, new org.apache.thrift.meta_data.FieldMetaData("updatedTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.THREADS_USED, new org.apache.thrift.meta_data.FieldMetaData("threadsUsed", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.QUEUE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("queueSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LOAD_AVG, new org.apache.thrift.meta_data.FieldMetaData("loadAvg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.METRICS, new org.apache.thrift.meta_data.FieldMetaData("metrics", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AnalystT.class, metaDataMap);
  }

  public AnalystT() {
  }

  public AnalystT(
    java.lang.String id,
    java.lang.String arch,
    java.lang.String os,
    java.lang.String url,
    int port,
    int threadCount,
    boolean data,
    boolean master,
    int state,
    java.util.List<java.lang.Integer> taskIds,
    long updatedTime,
    int threadsUsed,
    int queueSize,
    double loadAvg,
    java.nio.ByteBuffer metrics)
  {
    this();
    this.id = id;
    this.arch = arch;
    this.os = os;
    this.url = url;
    this.port = port;
    setPortIsSet(true);
    this.threadCount = threadCount;
    setThreadCountIsSet(true);
    this.data = data;
    setDataIsSet(true);
    this.master = master;
    setMasterIsSet(true);
    this.state = state;
    setStateIsSet(true);
    this.taskIds = taskIds;
    this.updatedTime = updatedTime;
    setUpdatedTimeIsSet(true);
    this.threadsUsed = threadsUsed;
    setThreadsUsedIsSet(true);
    this.queueSize = queueSize;
    setQueueSizeIsSet(true);
    this.loadAvg = loadAvg;
    setLoadAvgIsSet(true);
    this.metrics = org.apache.thrift.TBaseHelper.copyBinary(metrics);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AnalystT(AnalystT other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetArch()) {
      this.arch = other.arch;
    }
    if (other.isSetOs()) {
      this.os = other.os;
    }
    if (other.isSetUrl()) {
      this.url = other.url;
    }
    this.port = other.port;
    this.threadCount = other.threadCount;
    this.data = other.data;
    this.master = other.master;
    this.state = other.state;
    if (other.isSetTaskIds()) {
      java.util.List<java.lang.Integer> __this__taskIds = new java.util.ArrayList<java.lang.Integer>(other.taskIds);
      this.taskIds = __this__taskIds;
    }
    this.updatedTime = other.updatedTime;
    this.threadsUsed = other.threadsUsed;
    this.queueSize = other.queueSize;
    this.loadAvg = other.loadAvg;
    if (other.isSetMetrics()) {
      this.metrics = org.apache.thrift.TBaseHelper.copyBinary(other.metrics);
    }
  }

  public AnalystT deepCopy() {
    return new AnalystT(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.arch = null;
    this.os = null;
    this.url = null;
    setPortIsSet(false);
    this.port = 0;
    setThreadCountIsSet(false);
    this.threadCount = 0;
    setDataIsSet(false);
    this.data = false;
    setMasterIsSet(false);
    this.master = false;
    setStateIsSet(false);
    this.state = 0;
    this.taskIds = null;
    setUpdatedTimeIsSet(false);
    this.updatedTime = 0;
    setThreadsUsedIsSet(false);
    this.threadsUsed = 0;
    setQueueSizeIsSet(false);
    this.queueSize = 0;
    setLoadAvgIsSet(false);
    this.loadAvg = 0.0;
    this.metrics = null;
  }

  public java.lang.String getId() {
    return this.id;
  }

  public AnalystT setId(java.lang.String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public java.lang.String getArch() {
    return this.arch;
  }

  public AnalystT setArch(java.lang.String arch) {
    this.arch = arch;
    return this;
  }

  public void unsetArch() {
    this.arch = null;
  }

  /** Returns true if field arch is set (has been assigned a value) and false otherwise */
  public boolean isSetArch() {
    return this.arch != null;
  }

  public void setArchIsSet(boolean value) {
    if (!value) {
      this.arch = null;
    }
  }

  public java.lang.String getOs() {
    return this.os;
  }

  public AnalystT setOs(java.lang.String os) {
    this.os = os;
    return this;
  }

  public void unsetOs() {
    this.os = null;
  }

  /** Returns true if field os is set (has been assigned a value) and false otherwise */
  public boolean isSetOs() {
    return this.os != null;
  }

  public void setOsIsSet(boolean value) {
    if (!value) {
      this.os = null;
    }
  }

  public java.lang.String getUrl() {
    return this.url;
  }

  public AnalystT setUrl(java.lang.String url) {
    this.url = url;
    return this;
  }

  public void unsetUrl() {
    this.url = null;
  }

  /** Returns true if field url is set (has been assigned a value) and false otherwise */
  public boolean isSetUrl() {
    return this.url != null;
  }

  public void setUrlIsSet(boolean value) {
    if (!value) {
      this.url = null;
    }
  }

  public int getPort() {
    return this.port;
  }

  public AnalystT setPort(int port) {
    this.port = port;
    setPortIsSet(true);
    return this;
  }

  public void unsetPort() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PORT_ISSET_ID);
  }

  /** Returns true if field port is set (has been assigned a value) and false otherwise */
  public boolean isSetPort() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PORT_ISSET_ID);
  }

  public void setPortIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PORT_ISSET_ID, value);
  }

  public int getThreadCount() {
    return this.threadCount;
  }

  public AnalystT setThreadCount(int threadCount) {
    this.threadCount = threadCount;
    setThreadCountIsSet(true);
    return this;
  }

  public void unsetThreadCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __THREADCOUNT_ISSET_ID);
  }

  /** Returns true if field threadCount is set (has been assigned a value) and false otherwise */
  public boolean isSetThreadCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __THREADCOUNT_ISSET_ID);
  }

  public void setThreadCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __THREADCOUNT_ISSET_ID, value);
  }

  public boolean isData() {
    return this.data;
  }

  public AnalystT setData(boolean data) {
    this.data = data;
    setDataIsSet(true);
    return this;
  }

  public void unsetData() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DATA_ISSET_ID);
  }

  /** Returns true if field data is set (has been assigned a value) and false otherwise */
  public boolean isSetData() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DATA_ISSET_ID);
  }

  public void setDataIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DATA_ISSET_ID, value);
  }

  public boolean isMaster() {
    return this.master;
  }

  public AnalystT setMaster(boolean master) {
    this.master = master;
    setMasterIsSet(true);
    return this;
  }

  public void unsetMaster() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MASTER_ISSET_ID);
  }

  /** Returns true if field master is set (has been assigned a value) and false otherwise */
  public boolean isSetMaster() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MASTER_ISSET_ID);
  }

  public void setMasterIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MASTER_ISSET_ID, value);
  }

  public int getState() {
    return this.state;
  }

  public AnalystT setState(int state) {
    this.state = state;
    setStateIsSet(true);
    return this;
  }

  public void unsetState() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STATE_ISSET_ID);
  }

  /** Returns true if field state is set (has been assigned a value) and false otherwise */
  public boolean isSetState() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STATE_ISSET_ID);
  }

  public void setStateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STATE_ISSET_ID, value);
  }

  public int getTaskIdsSize() {
    return (this.taskIds == null) ? 0 : this.taskIds.size();
  }

  public java.util.Iterator<java.lang.Integer> getTaskIdsIterator() {
    return (this.taskIds == null) ? null : this.taskIds.iterator();
  }

  public void addToTaskIds(int elem) {
    if (this.taskIds == null) {
      this.taskIds = new java.util.ArrayList<java.lang.Integer>();
    }
    this.taskIds.add(elem);
  }

  public java.util.List<java.lang.Integer> getTaskIds() {
    return this.taskIds;
  }

  public AnalystT setTaskIds(java.util.List<java.lang.Integer> taskIds) {
    this.taskIds = taskIds;
    return this;
  }

  public void unsetTaskIds() {
    this.taskIds = null;
  }

  /** Returns true if field taskIds is set (has been assigned a value) and false otherwise */
  public boolean isSetTaskIds() {
    return this.taskIds != null;
  }

  public void setTaskIdsIsSet(boolean value) {
    if (!value) {
      this.taskIds = null;
    }
  }

  public long getUpdatedTime() {
    return this.updatedTime;
  }

  public AnalystT setUpdatedTime(long updatedTime) {
    this.updatedTime = updatedTime;
    setUpdatedTimeIsSet(true);
    return this;
  }

  public void unsetUpdatedTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __UPDATEDTIME_ISSET_ID);
  }

  /** Returns true if field updatedTime is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdatedTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __UPDATEDTIME_ISSET_ID);
  }

  public void setUpdatedTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __UPDATEDTIME_ISSET_ID, value);
  }

  public int getThreadsUsed() {
    return this.threadsUsed;
  }

  public AnalystT setThreadsUsed(int threadsUsed) {
    this.threadsUsed = threadsUsed;
    setThreadsUsedIsSet(true);
    return this;
  }

  public void unsetThreadsUsed() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __THREADSUSED_ISSET_ID);
  }

  /** Returns true if field threadsUsed is set (has been assigned a value) and false otherwise */
  public boolean isSetThreadsUsed() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __THREADSUSED_ISSET_ID);
  }

  public void setThreadsUsedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __THREADSUSED_ISSET_ID, value);
  }

  public int getQueueSize() {
    return this.queueSize;
  }

  public AnalystT setQueueSize(int queueSize) {
    this.queueSize = queueSize;
    setQueueSizeIsSet(true);
    return this;
  }

  public void unsetQueueSize() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __QUEUESIZE_ISSET_ID);
  }

  /** Returns true if field queueSize is set (has been assigned a value) and false otherwise */
  public boolean isSetQueueSize() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __QUEUESIZE_ISSET_ID);
  }

  public void setQueueSizeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __QUEUESIZE_ISSET_ID, value);
  }

  public double getLoadAvg() {
    return this.loadAvg;
  }

  public AnalystT setLoadAvg(double loadAvg) {
    this.loadAvg = loadAvg;
    setLoadAvgIsSet(true);
    return this;
  }

  public void unsetLoadAvg() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LOADAVG_ISSET_ID);
  }

  /** Returns true if field loadAvg is set (has been assigned a value) and false otherwise */
  public boolean isSetLoadAvg() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LOADAVG_ISSET_ID);
  }

  public void setLoadAvgIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LOADAVG_ISSET_ID, value);
  }

  public byte[] getMetrics() {
    setMetrics(org.apache.thrift.TBaseHelper.rightSize(metrics));
    return metrics == null ? null : metrics.array();
  }

  public java.nio.ByteBuffer bufferForMetrics() {
    return org.apache.thrift.TBaseHelper.copyBinary(metrics);
  }

  public AnalystT setMetrics(byte[] metrics) {
    this.metrics = metrics == null ? (java.nio.ByteBuffer)null : java.nio.ByteBuffer.wrap(metrics.clone());
    return this;
  }

  public AnalystT setMetrics(java.nio.ByteBuffer metrics) {
    this.metrics = org.apache.thrift.TBaseHelper.copyBinary(metrics);
    return this;
  }

  public void unsetMetrics() {
    this.metrics = null;
  }

  /** Returns true if field metrics is set (has been assigned a value) and false otherwise */
  public boolean isSetMetrics() {
    return this.metrics != null;
  }

  public void setMetricsIsSet(boolean value) {
    if (!value) {
      this.metrics = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.String)value);
      }
      break;

    case ARCH:
      if (value == null) {
        unsetArch();
      } else {
        setArch((java.lang.String)value);
      }
      break;

    case OS:
      if (value == null) {
        unsetOs();
      } else {
        setOs((java.lang.String)value);
      }
      break;

    case URL:
      if (value == null) {
        unsetUrl();
      } else {
        setUrl((java.lang.String)value);
      }
      break;

    case PORT:
      if (value == null) {
        unsetPort();
      } else {
        setPort((java.lang.Integer)value);
      }
      break;

    case THREAD_COUNT:
      if (value == null) {
        unsetThreadCount();
      } else {
        setThreadCount((java.lang.Integer)value);
      }
      break;

    case DATA:
      if (value == null) {
        unsetData();
      } else {
        setData((java.lang.Boolean)value);
      }
      break;

    case MASTER:
      if (value == null) {
        unsetMaster();
      } else {
        setMaster((java.lang.Boolean)value);
      }
      break;

    case STATE:
      if (value == null) {
        unsetState();
      } else {
        setState((java.lang.Integer)value);
      }
      break;

    case TASK_IDS:
      if (value == null) {
        unsetTaskIds();
      } else {
        setTaskIds((java.util.List<java.lang.Integer>)value);
      }
      break;

    case UPDATED_TIME:
      if (value == null) {
        unsetUpdatedTime();
      } else {
        setUpdatedTime((java.lang.Long)value);
      }
      break;

    case THREADS_USED:
      if (value == null) {
        unsetThreadsUsed();
      } else {
        setThreadsUsed((java.lang.Integer)value);
      }
      break;

    case QUEUE_SIZE:
      if (value == null) {
        unsetQueueSize();
      } else {
        setQueueSize((java.lang.Integer)value);
      }
      break;

    case LOAD_AVG:
      if (value == null) {
        unsetLoadAvg();
      } else {
        setLoadAvg((java.lang.Double)value);
      }
      break;

    case METRICS:
      if (value == null) {
        unsetMetrics();
      } else {
        if (value instanceof byte[]) {
          setMetrics((byte[])value);
        } else {
          setMetrics((java.nio.ByteBuffer)value);
        }
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case ARCH:
      return getArch();

    case OS:
      return getOs();

    case URL:
      return getUrl();

    case PORT:
      return getPort();

    case THREAD_COUNT:
      return getThreadCount();

    case DATA:
      return isData();

    case MASTER:
      return isMaster();

    case STATE:
      return getState();

    case TASK_IDS:
      return getTaskIds();

    case UPDATED_TIME:
      return getUpdatedTime();

    case THREADS_USED:
      return getThreadsUsed();

    case QUEUE_SIZE:
      return getQueueSize();

    case LOAD_AVG:
      return getLoadAvg();

    case METRICS:
      return getMetrics();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case ARCH:
      return isSetArch();
    case OS:
      return isSetOs();
    case URL:
      return isSetUrl();
    case PORT:
      return isSetPort();
    case THREAD_COUNT:
      return isSetThreadCount();
    case DATA:
      return isSetData();
    case MASTER:
      return isSetMaster();
    case STATE:
      return isSetState();
    case TASK_IDS:
      return isSetTaskIds();
    case UPDATED_TIME:
      return isSetUpdatedTime();
    case THREADS_USED:
      return isSetThreadsUsed();
    case QUEUE_SIZE:
      return isSetQueueSize();
    case LOAD_AVG:
      return isSetLoadAvg();
    case METRICS:
      return isSetMetrics();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof AnalystT)
      return this.equals((AnalystT)that);
    return false;
  }

  public boolean equals(AnalystT that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_arch = true && this.isSetArch();
    boolean that_present_arch = true && that.isSetArch();
    if (this_present_arch || that_present_arch) {
      if (!(this_present_arch && that_present_arch))
        return false;
      if (!this.arch.equals(that.arch))
        return false;
    }

    boolean this_present_os = true && this.isSetOs();
    boolean that_present_os = true && that.isSetOs();
    if (this_present_os || that_present_os) {
      if (!(this_present_os && that_present_os))
        return false;
      if (!this.os.equals(that.os))
        return false;
    }

    boolean this_present_url = true && this.isSetUrl();
    boolean that_present_url = true && that.isSetUrl();
    if (this_present_url || that_present_url) {
      if (!(this_present_url && that_present_url))
        return false;
      if (!this.url.equals(that.url))
        return false;
    }

    boolean this_present_port = true;
    boolean that_present_port = true;
    if (this_present_port || that_present_port) {
      if (!(this_present_port && that_present_port))
        return false;
      if (this.port != that.port)
        return false;
    }

    boolean this_present_threadCount = true;
    boolean that_present_threadCount = true;
    if (this_present_threadCount || that_present_threadCount) {
      if (!(this_present_threadCount && that_present_threadCount))
        return false;
      if (this.threadCount != that.threadCount)
        return false;
    }

    boolean this_present_data = true;
    boolean that_present_data = true;
    if (this_present_data || that_present_data) {
      if (!(this_present_data && that_present_data))
        return false;
      if (this.data != that.data)
        return false;
    }

    boolean this_present_master = true;
    boolean that_present_master = true;
    if (this_present_master || that_present_master) {
      if (!(this_present_master && that_present_master))
        return false;
      if (this.master != that.master)
        return false;
    }

    boolean this_present_state = true;
    boolean that_present_state = true;
    if (this_present_state || that_present_state) {
      if (!(this_present_state && that_present_state))
        return false;
      if (this.state != that.state)
        return false;
    }

    boolean this_present_taskIds = true && this.isSetTaskIds();
    boolean that_present_taskIds = true && that.isSetTaskIds();
    if (this_present_taskIds || that_present_taskIds) {
      if (!(this_present_taskIds && that_present_taskIds))
        return false;
      if (!this.taskIds.equals(that.taskIds))
        return false;
    }

    boolean this_present_updatedTime = true;
    boolean that_present_updatedTime = true;
    if (this_present_updatedTime || that_present_updatedTime) {
      if (!(this_present_updatedTime && that_present_updatedTime))
        return false;
      if (this.updatedTime != that.updatedTime)
        return false;
    }

    boolean this_present_threadsUsed = true;
    boolean that_present_threadsUsed = true;
    if (this_present_threadsUsed || that_present_threadsUsed) {
      if (!(this_present_threadsUsed && that_present_threadsUsed))
        return false;
      if (this.threadsUsed != that.threadsUsed)
        return false;
    }

    boolean this_present_queueSize = true;
    boolean that_present_queueSize = true;
    if (this_present_queueSize || that_present_queueSize) {
      if (!(this_present_queueSize && that_present_queueSize))
        return false;
      if (this.queueSize != that.queueSize)
        return false;
    }

    boolean this_present_loadAvg = true;
    boolean that_present_loadAvg = true;
    if (this_present_loadAvg || that_present_loadAvg) {
      if (!(this_present_loadAvg && that_present_loadAvg))
        return false;
      if (this.loadAvg != that.loadAvg)
        return false;
    }

    boolean this_present_metrics = true && this.isSetMetrics();
    boolean that_present_metrics = true && that.isSetMetrics();
    if (this_present_metrics || that_present_metrics) {
      if (!(this_present_metrics && that_present_metrics))
        return false;
      if (!this.metrics.equals(that.metrics))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id.hashCode();

    hashCode = hashCode * 8191 + ((isSetArch()) ? 131071 : 524287);
    if (isSetArch())
      hashCode = hashCode * 8191 + arch.hashCode();

    hashCode = hashCode * 8191 + ((isSetOs()) ? 131071 : 524287);
    if (isSetOs())
      hashCode = hashCode * 8191 + os.hashCode();

    hashCode = hashCode * 8191 + ((isSetUrl()) ? 131071 : 524287);
    if (isSetUrl())
      hashCode = hashCode * 8191 + url.hashCode();

    hashCode = hashCode * 8191 + port;

    hashCode = hashCode * 8191 + threadCount;

    hashCode = hashCode * 8191 + ((data) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((master) ? 131071 : 524287);

    hashCode = hashCode * 8191 + state;

    hashCode = hashCode * 8191 + ((isSetTaskIds()) ? 131071 : 524287);
    if (isSetTaskIds())
      hashCode = hashCode * 8191 + taskIds.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(updatedTime);

    hashCode = hashCode * 8191 + threadsUsed;

    hashCode = hashCode * 8191 + queueSize;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(loadAvg);

    hashCode = hashCode * 8191 + ((isSetMetrics()) ? 131071 : 524287);
    if (isSetMetrics())
      hashCode = hashCode * 8191 + metrics.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(AnalystT other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetArch()).compareTo(other.isSetArch());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArch()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arch, other.arch);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOs()).compareTo(other.isSetOs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.os, other.os);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUrl()).compareTo(other.isSetUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.url, other.url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPort()).compareTo(other.isSetPort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.port, other.port);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetThreadCount()).compareTo(other.isSetThreadCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThreadCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.threadCount, other.threadCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetData()).compareTo(other.isSetData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, other.data);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMaster()).compareTo(other.isSetMaster());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaster()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.master, other.master);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetState()).compareTo(other.isSetState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, other.state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTaskIds()).compareTo(other.isSetTaskIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaskIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskIds, other.taskIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUpdatedTime()).compareTo(other.isSetUpdatedTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdatedTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updatedTime, other.updatedTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetThreadsUsed()).compareTo(other.isSetThreadsUsed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThreadsUsed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.threadsUsed, other.threadsUsed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetQueueSize()).compareTo(other.isSetQueueSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueueSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queueSize, other.queueSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLoadAvg()).compareTo(other.isSetLoadAvg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoadAvg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loadAvg, other.loadAvg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMetrics()).compareTo(other.isSetMetrics());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMetrics()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metrics, other.metrics);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("AnalystT(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("arch:");
    if (this.arch == null) {
      sb.append("null");
    } else {
      sb.append(this.arch);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("os:");
    if (this.os == null) {
      sb.append("null");
    } else {
      sb.append(this.os);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("url:");
    if (this.url == null) {
      sb.append("null");
    } else {
      sb.append(this.url);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("port:");
    sb.append(this.port);
    first = false;
    if (!first) sb.append(", ");
    sb.append("threadCount:");
    sb.append(this.threadCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("data:");
    sb.append(this.data);
    first = false;
    if (!first) sb.append(", ");
    sb.append("master:");
    sb.append(this.master);
    first = false;
    if (!first) sb.append(", ");
    sb.append("state:");
    sb.append(this.state);
    first = false;
    if (!first) sb.append(", ");
    sb.append("taskIds:");
    if (this.taskIds == null) {
      sb.append("null");
    } else {
      sb.append(this.taskIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("updatedTime:");
    sb.append(this.updatedTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("threadsUsed:");
    sb.append(this.threadsUsed);
    first = false;
    if (!first) sb.append(", ");
    sb.append("queueSize:");
    sb.append(this.queueSize);
    first = false;
    if (!first) sb.append(", ");
    sb.append("loadAvg:");
    sb.append(this.loadAvg);
    first = false;
    if (!first) sb.append(", ");
    sb.append("metrics:");
    if (this.metrics == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.metrics, sb);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AnalystTStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public AnalystTStandardScheme getScheme() {
      return new AnalystTStandardScheme();
    }
  }

  private static class AnalystTStandardScheme extends org.apache.thrift.scheme.StandardScheme<AnalystT> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AnalystT struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ARCH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.arch = iprot.readString();
              struct.setArchIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // OS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.os = iprot.readString();
              struct.setOsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.url = iprot.readString();
              struct.setUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PORT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.port = iprot.readI32();
              struct.setPortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // THREAD_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.threadCount = iprot.readI32();
              struct.setThreadCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.data = iprot.readBool();
              struct.setDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // MASTER
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.master = iprot.readBool();
              struct.setMasterIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.state = iprot.readI32();
              struct.setStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // TASK_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list26 = iprot.readListBegin();
                struct.taskIds = new java.util.ArrayList<java.lang.Integer>(_list26.size);
                int _elem27;
                for (int _i28 = 0; _i28 < _list26.size; ++_i28)
                {
                  _elem27 = iprot.readI32();
                  struct.taskIds.add(_elem27);
                }
                iprot.readListEnd();
              }
              struct.setTaskIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // UPDATED_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.updatedTime = iprot.readI64();
              struct.setUpdatedTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // THREADS_USED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.threadsUsed = iprot.readI32();
              struct.setThreadsUsedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // QUEUE_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.queueSize = iprot.readI32();
              struct.setQueueSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // LOAD_AVG
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.loadAvg = iprot.readDouble();
              struct.setLoadAvgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // METRICS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.metrics = iprot.readBinary();
              struct.setMetricsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AnalystT struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.arch != null) {
        oprot.writeFieldBegin(ARCH_FIELD_DESC);
        oprot.writeString(struct.arch);
        oprot.writeFieldEnd();
      }
      if (struct.os != null) {
        oprot.writeFieldBegin(OS_FIELD_DESC);
        oprot.writeString(struct.os);
        oprot.writeFieldEnd();
      }
      if (struct.url != null) {
        oprot.writeFieldBegin(URL_FIELD_DESC);
        oprot.writeString(struct.url);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PORT_FIELD_DESC);
      oprot.writeI32(struct.port);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(THREAD_COUNT_FIELD_DESC);
      oprot.writeI32(struct.threadCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DATA_FIELD_DESC);
      oprot.writeBool(struct.data);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MASTER_FIELD_DESC);
      oprot.writeBool(struct.master);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STATE_FIELD_DESC);
      oprot.writeI32(struct.state);
      oprot.writeFieldEnd();
      if (struct.taskIds != null) {
        oprot.writeFieldBegin(TASK_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.taskIds.size()));
          for (int _iter29 : struct.taskIds)
          {
            oprot.writeI32(_iter29);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(UPDATED_TIME_FIELD_DESC);
      oprot.writeI64(struct.updatedTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(THREADS_USED_FIELD_DESC);
      oprot.writeI32(struct.threadsUsed);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(QUEUE_SIZE_FIELD_DESC);
      oprot.writeI32(struct.queueSize);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOAD_AVG_FIELD_DESC);
      oprot.writeDouble(struct.loadAvg);
      oprot.writeFieldEnd();
      if (struct.metrics != null) {
        oprot.writeFieldBegin(METRICS_FIELD_DESC);
        oprot.writeBinary(struct.metrics);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AnalystTTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public AnalystTTupleScheme getScheme() {
      return new AnalystTTupleScheme();
    }
  }

  private static class AnalystTTupleScheme extends org.apache.thrift.scheme.TupleScheme<AnalystT> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AnalystT struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetArch()) {
        optionals.set(1);
      }
      if (struct.isSetOs()) {
        optionals.set(2);
      }
      if (struct.isSetUrl()) {
        optionals.set(3);
      }
      if (struct.isSetPort()) {
        optionals.set(4);
      }
      if (struct.isSetThreadCount()) {
        optionals.set(5);
      }
      if (struct.isSetData()) {
        optionals.set(6);
      }
      if (struct.isSetMaster()) {
        optionals.set(7);
      }
      if (struct.isSetState()) {
        optionals.set(8);
      }
      if (struct.isSetTaskIds()) {
        optionals.set(9);
      }
      if (struct.isSetUpdatedTime()) {
        optionals.set(10);
      }
      if (struct.isSetThreadsUsed()) {
        optionals.set(11);
      }
      if (struct.isSetQueueSize()) {
        optionals.set(12);
      }
      if (struct.isSetLoadAvg()) {
        optionals.set(13);
      }
      if (struct.isSetMetrics()) {
        optionals.set(14);
      }
      oprot.writeBitSet(optionals, 15);
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetArch()) {
        oprot.writeString(struct.arch);
      }
      if (struct.isSetOs()) {
        oprot.writeString(struct.os);
      }
      if (struct.isSetUrl()) {
        oprot.writeString(struct.url);
      }
      if (struct.isSetPort()) {
        oprot.writeI32(struct.port);
      }
      if (struct.isSetThreadCount()) {
        oprot.writeI32(struct.threadCount);
      }
      if (struct.isSetData()) {
        oprot.writeBool(struct.data);
      }
      if (struct.isSetMaster()) {
        oprot.writeBool(struct.master);
      }
      if (struct.isSetState()) {
        oprot.writeI32(struct.state);
      }
      if (struct.isSetTaskIds()) {
        {
          oprot.writeI32(struct.taskIds.size());
          for (int _iter30 : struct.taskIds)
          {
            oprot.writeI32(_iter30);
          }
        }
      }
      if (struct.isSetUpdatedTime()) {
        oprot.writeI64(struct.updatedTime);
      }
      if (struct.isSetThreadsUsed()) {
        oprot.writeI32(struct.threadsUsed);
      }
      if (struct.isSetQueueSize()) {
        oprot.writeI32(struct.queueSize);
      }
      if (struct.isSetLoadAvg()) {
        oprot.writeDouble(struct.loadAvg);
      }
      if (struct.isSetMetrics()) {
        oprot.writeBinary(struct.metrics);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AnalystT struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(15);
      if (incoming.get(0)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.arch = iprot.readString();
        struct.setArchIsSet(true);
      }
      if (incoming.get(2)) {
        struct.os = iprot.readString();
        struct.setOsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.url = iprot.readString();
        struct.setUrlIsSet(true);
      }
      if (incoming.get(4)) {
        struct.port = iprot.readI32();
        struct.setPortIsSet(true);
      }
      if (incoming.get(5)) {
        struct.threadCount = iprot.readI32();
        struct.setThreadCountIsSet(true);
      }
      if (incoming.get(6)) {
        struct.data = iprot.readBool();
        struct.setDataIsSet(true);
      }
      if (incoming.get(7)) {
        struct.master = iprot.readBool();
        struct.setMasterIsSet(true);
      }
      if (incoming.get(8)) {
        struct.state = iprot.readI32();
        struct.setStateIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TList _list31 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.taskIds = new java.util.ArrayList<java.lang.Integer>(_list31.size);
          int _elem32;
          for (int _i33 = 0; _i33 < _list31.size; ++_i33)
          {
            _elem32 = iprot.readI32();
            struct.taskIds.add(_elem32);
          }
        }
        struct.setTaskIdsIsSet(true);
      }
      if (incoming.get(10)) {
        struct.updatedTime = iprot.readI64();
        struct.setUpdatedTimeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.threadsUsed = iprot.readI32();
        struct.setThreadsUsedIsSet(true);
      }
      if (incoming.get(12)) {
        struct.queueSize = iprot.readI32();
        struct.setQueueSizeIsSet(true);
      }
      if (incoming.get(13)) {
        struct.loadAvg = iprot.readDouble();
        struct.setLoadAvgIsSet(true);
      }
      if (incoming.get(14)) {
        struct.metrics = iprot.readBinary();
        struct.setMetricsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

